<?xml version="1.0"?>
<project name="jalviewX" default="usage" basedir=".">
	<!-- we use jalopy to format our sources -->
	<taskdef name="jalopy"
         classname="de.hunsicker.jalopy.plugin.ant.AntPlugin">
		<classpath>
			<fileset dir="utils/jalopy/lib">
				<include name="*.jar" />
			</fileset>
		</classpath>
	</taskdef>

	<target name="help" depends="usage"/>
	<target name="usage">
		<echo message="~~~Jalview Ant build.xml Usage~~~~"/>
		<echo message="Targets include:"/>
		<echo message="usage - default target, displays this message"/>
		<echo message="buildindices - generates JavaHelpSearch from the help files"/>
		<echo message="build - compiles all necessary files for Application"/>
		<echo message="makedist - compiles and places all necessary jar files into directory dist"/>
		<echo message="makefulldist - signs all jar files and builds jnlp file for full distribution"/>
		<echo message="              this needs a keystore and key. See docs/building.html for more information."/>
		<echo message="compileApplet - compiles all necessary files for Applet"/>
		<echo message="makeApplet - compiles, then packages and obfuscates the Applet"/>
		<echo message="See docs/building.html and the comments in build file for other targets."/>
	    <echo message="note: compile and makeApplet require the property java118.home to be set to point to a java 1.1.8 jdk."/>
	</target>


	<!-- utils is a class path to additional utilities needed for
    building docs, jars and webstart stuff -->
	<!--
        Userdefined build property defaults

        wsdl.server list (plus namespace mapping info ???)  - also want
                ... to make this a dynamically generatable property
        WebStart Location
        Build location - provide a temporary root for speed
        jarsigner keystore and info
        Jakarta and axis classpath ?
        Default argument for starting Jalview (if it exists).

-->

	<target name="init">
		<path id="axis.classpath">
			<!-->
			<fileset dir="/usr/local/axis/lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="/usr/local/jakarta-tomcat-5/webapps/axis/WEB-INF/lib">
				<include name="**/*.jar"/>
				<include name="*.jar"/>
			</fileset> -->
      </path>
		<!-- Jalview Version String displayed by application on startup and used to check for updates -->
    <property name="JALVIEW_VERSION" value="DEVELOPMENT"/> <!-- 2.4 (VAMSAS)" -->
		<!-- Include debugging information in javac true or false -->
		<property name="javac.debug" value="true"/>
		
		<!-- JarSigner Key Store for Webstart Distribution -->
		<property name="jalview.keystore" value="./keys/.keystore"/>
		<!-- Keystore Password -->
		<property name="jalview.keystore.pass" value="alignmentisfun"/>
		<!-- Key Name -->
		<property name="jalview.key" value="jalview"/>
		<!-- Key Password -->
		<property name="jalview.key.pass" value="alignmentisfun"/>
						
		<!-- Don't change anything below here unless you know what you are doing! -->
		<!-- Url path for WebStart in JNLP file -->
		<property name="WebStartLocation" value="http://www.jalview.org/webstart"/>
		<!-- build directory configuration -->
		<property name="libDir" value="lib"/>
		<property name="resourceDir" value="resources"/>
		<property name="helpDir" value="help"/>
		<property name="docDir" value="doc"/>
		<property name="sourceDir" value="src" />
		<property name="schemaDir" value="schemas" />
		<property name="outputDir" value="classes" />
		<property name="packageDir" value="dist" />
		<property name="outputJar" value="jalview.jar" />
	  <!-- Jalview Applet JMol Jar Dependency -->
    <property name="jmolJar" value="Jmol-11.0.2.jar" />
		<property name="jalviewLiteJar" value="jalviewApplet.jar"/>
		<!-- switch to indicate if we should obfuscate jalviewLite -->
		<!--<property name="donotobfuscate" value="true"/> -->
				
		<!-- Jalview Web Service Clients - see the comments in 'buildextclients' for details -->
		<property name="wsdl.File" value="http://www.compbio.dundee.ac.uk/JalviewWS/services/jpred?wsdl" />
		<property name="wsdl.Files" value="http://www.compbio.dundee.ac.uk/JalviewWS/services/vamsas?wsdlFiles" />
		<property name="wsdl.MsaWS" value="http://www.compbio.dundee.ac.uk/JalviewWS/services/MuscleWS?wsdl" />
		<property name="wsdl.MsaWS2" value="http://www.compbio.dundee.ac.uk/JalviewWS/services/ClustalWS?wsdl" />
		<property name="WSInterf" value="MsaWS" />
		<property name="wsdl.Namespace" value="vamsas" />
		<property name="wsdl.ClientNS" value="ext.vamsas" />
		<!-- the class path for building the application -->
		<path id="build.classpath">
			<fileset dir="utils">
				<include name="*.jar"/>
				<include name="**/*.jar"/>
			</fileset>
			<fileset dir="${libDir}">
				<include name="*.jar"/>
				<include name="**/*.jar"/>
			</fileset>
			
		</path>
		<property name="source.dist.name" value="${basedir}/jalview-src.tar.gz"/>
		<!-- The Location of the java 1.1.8 jdk -->
		<property name="java118.home" value="C:\Sun\jdk1.1.8" />
		<property name="applet.jre.tools" value="${java118.home}/lib/classes.zip"/>
		<!-- jre for 1.4 version
		<property name="applet.jre.tools" value="${java.home}/lib/rt.jar"/>
		-->
		<!-- the classpath for building the 1.1 applet -->
		<path id="jalviewlite.deps">
			<fileset dir="${java118.home}">
				<include name="lib/classes.zip"/>
			</fileset>
	   	<pathelement location="lib/${jmolJar}"/>
	  </path>
	</target>


	<taskdef classpath="utils/roxes-ant-tasks-1.2-2004-01-30.jar" resource="com/roxes/tools/ant/taskdefs.properties"/>
	<target name="buildPropertiesFile" depends="init">
		<tstamp prefix="build">
			<format property="date" pattern="dd MMMM yyyy"/>
		</tstamp>
		<properties file="${outputDir}/.build_properties">
			<header>
          ---Jalview Build Details---
        </header>
			<property name="VERSION" value="${JALVIEW_VERSION}"/>
			<property name="BUILD_DATE" value="${build.date}"/>
		</properties>
	</target>


	<target name="clean" depends="init">
		<!-- not efficient yet. -->
		<delete dir="${outputDir}"/>
	</target>

	<target name="distclean" depends="init, clean">

		<echo message="REMOVING ALL BACKUP/AUTOSAVES!"/>
		<delete>
			<fileset dir=".">
				<include name="${outputJar}"/>
				<include name="#*#"/>
				<include name="#*.*#"/>
				<include name="**/#*#"/>
				<include name="**/#*.*#"/>
				<include name="*~"/>
				<include name="*.*~"/>
				<include name="**/*~"/>
				<include name="**/*.*~"/>
			</fileset>
		</delete>
	</target>

	<target name="prepare" depends="init">
		<mkdir dir="${outputDir}"/>
		<copy todir="${outputDir}">
			<fileset dir=".">
				<include name="${docDir}/**/*.*"/>
				<include name="${helpDir}/**/*.*"/>
				<include name="${libDir}/*.jar"/>
			</fileset>
			<fileset dir="${resourceDir}">
				<include name="**/*.*"/>
			</fileset>
		</copy>
	</target>

	<target name="build" depends="prepare">
		<!-- not efficient yet. -->
		<javac source="1.4" target="1.4"
        srcdir ="${sourceDir}"
        destdir="${outputDir}"
				debug="${javac.debug}"
      classpathref="build.classpath">
			<exclude name="jalview/*applet*"/>
			<exclude name="com/stevesoft/**"/>
		</javac>
	</target>
	<target name="buildindices" depends="init, prepare"
    unless="help.uptodate">
		<java
      classname="com.sun.java.help.search.Indexer"
      classpathref="build.classpath"
      fork="true"
      dir="${outputDir}/${helpDir}"
      >
			<arg line="html"/>
		</java>
	</target>

	<target name="makefulldist" depends="makedist">
		<!-- the default keystore details might need to be edited here -->
		<signjar
      storepass="${jalview.keystore.pass}"
      keypass="${jalview.key.pass}"
      keystore="${jalview.keystore}"
      alias="${jalview.key}"
      lazy="false"
      verbose="false"
      >

			<fileset dir="${packageDir}">
				<include name="*.jar"/>
			</fileset>
		</signjar>
		<taskdef classpathref="build.classpath" resource="com/roxes/tools/ant/taskdefs.properties"/>

		<!--    codebase="http://www.jalview.org/jalview/webstart" -->
		<!-- href="jalview.jnlp" prevent hard-wired pickup of jnlp in certain javaws versions -->
		<jnlp toFile="${packageDir}/jalview.jnlp" 
      codebase="${WebStartLocation}">
			<information>
				<title>Jalview</title>
				<vendor>The Barton Group</vendor>
				<homepage href="http://www.jalview.org"/>
				<description>Jalview Multiple Alignment Editor</description>
				<description kind="short">Jalview</description>
				<icon href="logo_big.gif"/>
				<offline_allowed/>
				<!--
	<association mime-type="application-x/ext-file" extensions="fa"/>
        <association mime-type="application-x/ext-file" extensions="fasta"/>
        <association mime-type="application-x/ext-file" extensions="fastq"/>
        <association mime-type="application-x/ext-file" extensions="blc"/>
        <association mime-type="application-x/ext-file" extensions="msf"/>
        <association mime-type="application-x/ext-file" extensions="pfam"/>
        <association mime-type="application-x/ext-file" extensions="aln"/>
        <association mime-type="application-x/ext-file" extensions="pir"/>
        <association mime-type="application-x/ext-file" extensions="amsa"/>
	-->
			</information>
			<resources>
				<j2se version="1.4+"/>
				<fileset dir="${packageDir}">
					<include name="jalview.jar"/>
				</fileset>
				<fileset dir="${packageDir}">
					<include name="*.jar"/>
					<exclude name="jalview.jar"/>
				</fileset>
				<property name="jalview.version" value="${JALVIEW_VERSION}"/>
			</resources>
			<application_desc main_class="jalview.bin.Jalview">
			</application_desc>
			<security>
				<all_permissions/>
			</security>
		</jnlp>
	</target>
	<target name="runenv" depends="init">
		<path id="run.classpath">
			<pathelement location="${outputDir}"/>
			<fileset dir="${outputDir}">
				<include name="${libDir}/*.jar"/>
			</fileset>
		</path>
		<pathconvert targetos="unix" refid="run.classpath" property="run.classpath"/>

		<echo>java -classpath ${run.classpath} jalview.bin.Jalview
      </echo>
	</target>

	<target name="buildextclients" depends="init">
		<input message="Building external client source from WSDLs - Do you really want to do this ? (Yy/Nn)"
      validargs="Y,y,n,N" defaultvalue="N"
      addproperty="doextbuild.response"/>
		<condition property="dontextbuild">
			<equals arg1="n" arg2="${doextbuild.response}"/>
		</condition>
		<condition property="dontextbuild">
			<equals arg1="N" arg2="${doextbuild.response}"/>
		</condition>
		<fail if="dontextbuild">
        Build External Client Code process aborted by user. Jalview source is unchanged.
      </fail>
		<!-- Currently, this doesn't happen automatically.
     1. Run WSDL2Java as below, which generates an ext.vamsas +
     vamsas.<datapackages> fileset.
     2. refactor ext.vamsas.SpecificserviceWS* to
     ext.vamsas.ServiceclassWS* that implements the ServiceclassWSI interface.
     3. Update the jalview.ws.*WServices classes to reflect the
     interface type, and all locations of this wsdl type that Jalview
     might be using.

-->
		<path id="axisbuild">
			<path refid="build.classpath"/>
		</path>
		<taskdef resource="axis-tasks.properties" classpathref="axisbuild"/>
		<move todir="./bak">
			<fileset dir="${sourceDir}" id="client">
				<include name="${wsdl.ClientNS}/*.*"/>
			</fileset>
		</move>

		<axis-wsdl2java
      output="${sourceDir}"
      verbose="true"
      url="${wsdl.MsaWS2}"
      serverside="false"
      deployscope="Request"
      debug="false"
      helpergen="true"
      all="true"
      >
			<mappingSet>
				<mapping
        namespace="${wsdl.Namespace}"
        package="${wsdl.ClientNS}"
        />
				<mapping namespace="http://dataTypes.vamsas"
        package="${wsdl.ClientNS}"/>
			</mappingSet>
		</axis-wsdl2java>
	</target>

	<target name="makedist" depends="build, buildPropertiesFile, buildindices">
		<!-- make the package jar -->
		<mkdir dir="${packageDir}"/>

		<jar destfile="${packageDir}/${outputJar}">
			<manifest>
				<attribute name="Main-Class" value="jalview.bin.Jalview"/>
			</manifest>
			<fileset dir="${outputDir}/">
				<exclude name="cache*/**"/>
				<exclude name="*.jar" />
				<exclude name="*.jar.*" />
				<exclude name="**/*.jar" />
				<exclude name="**/*.jar.*" />
			</fileset>
		</jar>

		<copy toDir="${packageDir}" flatten="true">
			<fileset dir="${outputDir}">
				<include name="*.jar"/>
				<include name="**/*.jar"/>
			</fileset>
		</copy>
	</target>


	<!-- jalopy code reformatter -->
	<target name="sourcescrub" depends="init,build">
		<jalopy destdir="jsrc" classpathref="run.classpath"
      convention="jalview-jalopy.xml">
			<fileset dir="${sourceDir}">
				<include name="*.java"/>
				<include name="**/*.java"/>
				<include name="**/**/*.java"/>
			</fileset>
		</jalopy>
	</target>



  <!-- Compile, package and obfuscate Jalview Applet -->
  <target name="makeApplet" depends="obfuscate"/>

  <target name="compileApplet" depends="init,clean">
    <mkdir dir="${outputDir}"/>
    <javac source="1.2"
    target="1.1"
    srcdir="${sourceDir}" 
    destdir="${outputDir}"
   	debug="${javac.debug}"
    classpath="lib/${jmolJar}"
       includes="jalview/appletgui/**"
       excludes="ext/**,MCview/**,org/**,vamsas/**"
       />
  </target>

  <target name="packageApplet" depends="compileApplet, buildPropertiesFile">
  <copy file="${resourceDir}/images/idwidth.gif" toFile="${outputDir}/images/idwidth.gif"/>
  <copy file="${resourceDir}/images/link.gif" toFile="${outputDir}/images/link.gif"/>
       <jar destfile="in.jar">
        <manifest>
            <attribute name="Main-Class" value="jalview.bin.JalviewLite"/>
        </manifest>
        <fileset dir="${outputDir}">
          <include name="com/**"/>
          <include name="MCview/**"/>
          <include name="jalview/**"/>
          <include name=".build_properties"/>
          <include name="images/idwidth.gif"/>
          <include name="images/link.gif"/>
        </fileset>
      </jar>
  </target>
  <target name="obfuscate" depends="-obfuscatefake,-obfuscatereally" description="construct the final jalviewLite applet jar with or without obfuscation">
  </target>
	<target name="-obfuscatefake" depends="packageApplet" if="donotobfuscate">    
  	<copy file="in.jar" tofile="${jalviewLiteJar}" />    	
    <delete file="in.jar"/>
  </target>
	<target name="-obfuscatereally" unless="donotobfuscate">
    
  	<path id="obfuscateDeps.path">
    <pathelement location="${applet.jre.tools}"/>
    <pathelement location="lib/${jmolJar}"/>
    </path>
    <taskdef resource="proguard/ant/task.properties" classpath="utils/proguard.jar" />
  	
    <proguard>
      <injar file="in.jar"/>
      <outjar file="${jalviewLiteJar}"/>
      <libraryjar refid="obfuscateDeps.path"/>
      <keep access="public" type="class"
      name="jalview.bin.JalviewLite">
        <field access="public"/>
        <method access="public"/>
        <constructor access="public"/>
      </keep>
<!--      -libraryjars "${obfuscateDeps}"
      -injars      in.jar
      -outjars     jalviewApplet.jar
      -keep public class jalview.bin.JalviewLite
       { public * ; } -->
      </proguard>
    <delete file="in.jar"/>
  </target>

	<target name="castorbinding" depends="init" description="Generate Java bindings to supported Jalview XML models.">
		<taskdef name="castor-srcgen"
			  classname="org.castor.anttask.CastorCodeGenTask"
		      classpathref="build.classpath" />
		<delete>
			<fileset dir="${sourceDir}/jalview/schemabinding/version2">
				<include name="*.java"/>
				<include name="descriptors/*.java"/>
			</fileset>
		</delete>
		<castor-srcgen file="${schemaDir}/vamsas.xsd"
			      todir="${sourceDir}"
			      package="jalview.schemabinding.version2"
			      warnings="false" 
				  	nodesc="false"
						verbose="true"
						properties="${schemaDir}/jalview.properties"
		/>
		<castor-srcgen file="${schemaDir}/JalviewUserColours.xsd"
			      todir="${sourceDir}"
			      package="jalview.schemabinding.version2"
			      warnings="false" 
				  	nodesc="false"
						verbose="true"
						properties="${schemaDir}/jalview.properties"
		/>
		<castor-srcgen file="${schemaDir}/jalview.xsd"
			      todir="${sourceDir}"
			      package="jalview.schemabinding.version2"
			      warnings="false" 
					  nodesc="false"
						verbose="true"
						properties="${schemaDir}/jalview.properties"
			
		/>
		<!-- 
		now build the jalview.binding package with the old schema set
		-->
		<delete>
			<fileset dir="${sourceDir}/jalview/binding/">
				<include name="**"/>
			</fileset>
		</delete>
		<castor-srcgen file="${schemaDir}/vamsasJvV1.xsd"
			      todir="${sourceDir}"
			      package="jalview.binding"
			      warnings="false" 
				  	nodesc="true"
						verbose="true"
						properties="${schemaDir}/jalview.nodesc.properties"
		/> 
		<castor-srcgen file="${schemaDir}/JalviewUserColours.xsd"
			      todir="${sourceDir}"
			      package="jalview.binding"
			      warnings="false" 
				  	nodesc="true"
						verbose="true"
						properties="${schemaDir}/jalview.nodesc.properties"
		/>
		<castor-srcgen file="${schemaDir}/jalviewJvV1.xsd"
			      todir="${sourceDir}"
			      package="jalview.binding"
			      warnings="false" 
					  nodesc="true"
						verbose="true"
						properties="${schemaDir}/jalview.nodesc.properties"
	/>
	</target>
	<target name="sourcedist" description="create jalview source distribution" depends="init">
		<delete file="${source.dist.name}"/>
		<tar destfile="${source.dist.name}" compression="gzip">
			<tarfileset dir="./" prefix="jalview" preserveLeadingSlashes="true">
				<include name="LICENSE"/>
				<include name="README"/>
				<include name="build.xml"/>
				<include name="jalview-jalopy.xml"/>
				<include name="JalviewApplet.jpx"/>
				<include name="JalviewX.jpx"/>
				<include name="${sourceDir}/*.java"/>
				<include name="${sourceDir}/**/*.java"/>
				<include name="${sourceDir}/**/*.cdr"/>
				<include name="${libDir}/**/*"/>						
				<include name="${resourceDir}/**/*"/>						
				<include name="${helpDir}/**/*"/>						
				<exclude name="**/*locales"/>
				<exclude name="*locales/**"/>
				<exclude name="utils/InstallAnywhere/**Build.iap_xml"/>
				<exclude name="utils/InstallAnywhere/**Build*/**"/>
				<exclude name="utils/InstallAnywhere/**Build*/**"/>
				<exclude name="utils/InstallAnywhere/**locale*"/>
				<exclude name="utils/InstallAnywhere/**locale*/**"/>
				<include name="${schemaDir}/**/*"/>						
				<include name="utils/**/*"/>
				<include name="${docDir}/**/*"/>						
			</tarfileset>
		</tar>
	</target>
</project>
