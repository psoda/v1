
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE paupLexrestart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE paupLexlex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via paupLexrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void paupLexrestart (FILE *input_file ,yyscan_t yyscanner );
void paupLex_switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE paupLex_create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void paupLex_delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void paupLex_flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void paupLexpush_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void paupLexpop_buffer_state (yyscan_t yyscanner );

static void paupLexensure_buffer_stack (yyscan_t yyscanner );
static void paupLex_load_buffer_state (yyscan_t yyscanner );
static void paupLex_init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER paupLex_flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE paupLex_scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE paupLex_scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE paupLex_scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *paupLexalloc (yy_size_t ,yyscan_t yyscanner );
void *paupLexrealloc (void *,yy_size_t ,yyscan_t yyscanner );
void paupLexfree (void * ,yyscan_t yyscanner );

#define yy_new_buffer paupLex_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        paupLexensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            paupLex_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        paupLexensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            paupLex_create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 246
#define YY_END_OF_BUFFER 247
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[946] =
    {   0,
        0,    0,  110,  110,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  175,  175,    0,    0,
        0,    0,    0,    0,    0,    0,  162,  162,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  188,  188,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  201,  201,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  247,  246,   10,   19,
      246,    2,    9,  110,   10,    9,  111,  159,    9,  158,
      156,  157,    9,  109,   10,   19,    9,  106,  107,  108,
       92,  101,  241,   97,  246,  102,  103,   95,   99,  104,
      100,   98,   96,   62,  105,   93,   91,   94,  241,  241,
      241,  241,  241,  241,  241,  241,  246,  151,   10,  151,
      150,  149,  148,  151,  151,  151,  151,  151,  151,  151,
      151,  151,  151,  151,  151,    9,  153,  154,   76,   66,
       67,  246,   63,   62,   65,   64,   76,   76,   76,   76,
       76,   69,   70,  234,  246,  246,   62,   11,  234,  234,

      234,  234,  234,  234,  234,  234,  234,  234,  151,  151,
      172,    9,  171,  169,  170,    9,  166,  167,  168,    9,
      173,  174,  175,   10,   16,    9,  176,   10,   19,  178,
      177,    9,  155,    9,  160,  161,  162,   10,   15,    9,
      163,   10,   19,  165,  164,    9,  151,  151,  185,    9,
      184,  182,  183,    9,  179,  180,  181,    9,  186,  187,
      188,   10,   17,    9,  189,   10,   19,  191,  190,    9,
      151,  151,  198,    9,  197,  195,  196,    9,  192,  193,
      194,    9,  199,  200,  201,   10,   18,    9,  202,   10,
       19,  204,  203,    9,    3,    3,   12,   14,    3,   13,

      119,  118,  117,  116,  119,  119,  119,  119,  246,  246,
        8,    7,    6,    5,    8,    8,  220,  208,  207,  211,
      206,  209,  205,  214,  241,  241,  241,  219,  241,  241,
      210,  229,  223,  222,  226,  221,  224,  241,  225,   38,
       37,   38,   38,   38,   38,   38,   38,   38,   49,   40,
       41,  246,   43,   39,   49,   49,   49,   49,   49,   49,
      245,  244,   10,    0,  110,   10,  159,  158,  156,   87,
        0,  241,  240,   85,   81,   82,   62,  242,    0,    0,
       62,  241,   89,   88,   90,  241,  241,  241,  241,  241,
      241,  241,   86,  152,  150,  152,  152,  152,  152,  152,

      152,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  152,  153,    0,   76,   75,
        0,   62,   76,   76,   76,   76,   76,  234,   81,   82,
       62,  234,  234,  234,  234,  234,  234,  234,   51,  234,
      234,  234,  234,  234,  234,  234,  234,  234,  152,  152,
      172,  171,  169,  166,  168,  174,  175,   10,  176,   10,
      155,  161,  162,   10,  163,   10,  152,  152,  185,  184,
      182,  179,  181,  187,  188,   10,  189,   10,  152,  152,
      198,  197,  195,  192,  194,  200,  201,   10,  202,   10,
        3,    3,  119,  118,  119,  119,  119,  119,    0,    0,

        0,  206,  213,  241,  241,  241,  218,  241,  241,  221,
      228,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,    0,   49,   48,   43,    0,   43,   49,
       49,   49,   49,   49,   49,  245,    0,   79,   80,  243,
       61,  241,  241,  241,  241,  241,  241,  241,  152,  152,
      152,  141,  144,  152,  152,  134,  152,  152,  152,  152,
      152,  152,  152,  152,  152,  142,  152,  152,  152,   61,
       68,   76,   76,   76,   76,  234,  234,  234,  234,  234,
       22,  234,  234,  234,  234,   77,  234,   55,  234,  234,
       60,  152,  152,  152,  152,  152,  152,  119,  112,  119,

      119,    0,   22,    4,  212,  241,  241,  241,  217,  241,
      241,  227,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   42,   49,   49,   49,   49,   49,
       49,    0,  241,  241,  241,    0,  235,  241,   83,    0,
      239,  152,  152,  152,  152,  152,  152,  152,  152,  152,
      152,  152,  152,  131,  152,  152,  152,  152,  152,   76,
       76,    0,   71,   76,  234,  234,  234,  234,  234,   53,
      234,  234,  234,   57,    0,  230,  234,  234,  234,  234,
      234,  152,  152,  152,  152,  152,  152,  119,  115,  119,
        0,  241,  241,  216,  241,   38,   38,   29,   38,   26,

       38,   38,   38,   38,   35,   38,   25,   38,   49,   49,
       49,    0,   44,   49,   49,    0,    0,  236,  241,   84,
      241,  143,  152,  152,  152,  152,  152,  152,  152,  152,
      132,  152,  152,  152,  152,  152,  152,  152,    0,   72,
       76,   76,   23,    0,  231,  234,   54,  234,   52,   21,
      234,   58,  234,  234,  234,   50,  152,  152,  152,  152,
      152,  152,  119,  119,   23,  241,  215,  241,   38,   38,
       38,   27,   38,   38,   38,   38,   24,    0,   45,   49,
       49,   49,    1,  241,  241,  143,  152,  152,  135,  133,
      152,  152,  120,  152,  132,  152,  152,  152,  152,  152,

      152,  152,   76,   76,  234,  234,  234,   56,  234,  234,
      122,  152,  124,  152,  126,  152,  119,  119,  241,  241,
       38,   38,   38,   38,   38,   38,   31,   49,   49,    0,
      238,    0,  237,  152,  152,  152,  152,  136,  130,  152,
      152,  145,  152,  152,  152,    0,   74,    0,   73,  234,
        0,  233,  234,    0,  232,   59,  152,  152,  152,  119,
      119,   38,   38,   38,   30,   38,   38,    0,   47,    0,
       46,  138,  152,  152,  152,  152,  152,  145,  152,  140,
      152,  234,   20,  152,  152,  152,  119,  119,   38,   38,
       38,   38,   38,  152,  152,  137,  152,  152,  121,  129,

       78,  123,  125,  127,  119,  114,   38,   38,   36,   33,
       38,  128,  146,  152,  139,  113,   38,   28,    0,   38,
       38,  152,   34,    0,   38,  152,    0,   38,  147,    0,
       38,    0,   38,    0,   38,    0,   38,    0,   38,    0,
       32,   32,   32,   32,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    8,    9,   10,    1,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   34,
       50,   51,   52,    1,   53,    1,   25,   26,   27,   28,

       29,   30,   31,   32,   33,   34,   35,   36,   37,   54,
       39,   40,   41,   55,   43,   56,   45,   46,   47,   48,
       49,   34,   57,   58,   59,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[60] =
    {   0,
        1,    2,    3,    2,    1,    4,    1,    5,    1,    1,
        6,    7,    1,    8,    1,    9,    9,   10,   11,    8,
       12,    1,    1,   12,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,    1,
        4,   13,   11,   11,   11,   11,    1,    8,    1
    } ;

static yyconst flex_int16_t yy_base[1066] =
    {   0,
        0,    6,   12,   15,   18,   23,   29,   32,   82,    0,
      140,  143,  199,    0,  258,    0,  317,  376,  435,    0,
      494,    0,    0,    1,  340,  343,  553,    0,  612,    0,
      346,  351,  368,  670,  720,    0,  354,  357,  778,  782,
      360,  785,  788,  791,  841,  900,  805,  816,  866,  875,
        2,    3,  821,  870,  959,    0, 1018,    0,  878,  881,
     1076, 1079, 1129,    0, 1187, 1190, 1193, 1197,    4,    5,
     1200, 1203, 1253,    0, 1312,    0, 1370, 1373, 1376, 1379,
     1429,    0, 1487, 1490, 1493, 1497, 1500, 1505, 1556,    0,
     1614, 1618, 1621, 1624, 1627, 1630, 1680,    0, 1729, 1774,

     1829,    0, 1888,    0, 1947,    0, 3486, 4153,   47, 4153,
       15, 4153, 4153,    0,   50,    0, 4153,    0,    0,    0,
     2006,    0,    0, 4153,   53, 4153, 4153, 4153, 4153, 4153,
     3450, 4153,  146, 4153, 3462, 4153, 4153, 4153, 3455, 4153,
       42, 4153, 3439, 2064, 4153, 3432, 3420, 3419,  150, 3391,
     3390, 3401,   21,   16,   21, 3379, 3327, 4153,   76,    0,
     3365, 4153, 4153, 3342,  126,  122, 3320, 3330,  117,   41,
      376,  114,  124,  358, 3317, 4153,    0, 4153,  170, 4153,
     4153, 3322, 4153,  673, 4153, 4153,  676,  794,  856, 1749,
     1753, 4153, 4153,    0, 3324,  163,  158, 4153,  654, 3286,

      297, 3295,  298,  128, 3283,  657, 3286,  659,  159,  660,
        0,    0,    0, 2083,    0,    0,    0, 4153,    0,    0,
     4153,    0,    0,  183, 4153,    0,    0,  184,    0, 4153,
     4153,    0,    0,    0, 4153,    0,    0,  187, 4153,    0,
        0,  327,    0, 4153, 4153,    0,  340,  832,    0,    0,
        0, 2142,    0,    0,    0, 4153,    0,    0, 4153,    0,
        0,  404, 4153,    0,    0,  407,    0, 4153, 4153,    0,
      391,  882,    0,    0,    0, 2201,    0,    0,    0, 4153,
        0,    0, 4153,    0,    0,  415, 4153,    0,    0,  421,
        0, 4153, 4153,    0,    0,  427, 4153, 4153,    0, 4153,

        0, 3280, 4153, 4153, 3265,  643,  378, 3270, 3265,  644,
     4153,  698, 4153, 4153,  657, 4153, 4153, 4153, 4153, 4153,
      930, 4153, 4153, 1082, 1085, 1088, 1763, 1209, 1766,  933,
     4153, 4153, 4153, 4153, 4153, 1102, 4153, 1382, 4153,    0,
     4153, 3250, 3260,  674,  369, 3262,  676,  758,  943, 4153,
     4153, 3269, 1106, 4153, 1385, 1388, 1220, 2031, 2043, 2075,
        0, 4153,  704, 3258,    0,  812,    0,    0, 2260, 4153,
     1223, 1402, 4153, 4153,    0,    0,  810, 3269, 3268,  817,
     2318, 1528, 4153, 4153, 4153, 3243, 3227, 3230,  766,  333,
     3220,  762, 4153,    0, 3243, 3227,  796, 3217, 3228, 3224,

     3204,  784, 3196,  873,  874, 3192, 3191, 3175,  783, 3185,
     3182, 3159, 2870, 2853, 2868, 2844,    0, 1405, 1408, 4153,
     2872, 1650, 1634, 2037, 2111, 2117, 2134,    0, 4153, 4153,
      895, 2859, 2846, 2855, 2837, 2838, 2841, 2832,    0,  883,
     2833,  899, 1051,  898, 1056, 2832, 2820, 2809, 1058, 2809,
        0,    0, 2337,    0,    0,    0,    0, 1118,    0, 1206,
        0,    0,    0, 1226,    0, 1231, 1072, 2808,    0,    0,
     2396,    0,    0,    0,    0, 1237,    0, 1240, 1192, 2796,
        0,    0, 2455,    0,    0,    0,    0, 1247,    0, 1393,
        0, 1413,    0, 2817, 2797, 2805, 2792, 2757, 2771, 2773,

     2760, 1522, 2167, 2107, 2184, 2194, 2231, 2237, 2243, 1802,
     2179,    0, 2744, 2760, 1358, 2741, 2727, 2732, 2739, 1471,
     2740, 2718, 2735, 1816, 2048, 4153, 1493, 2737, 2284, 2302,
     2312, 2253, 2328, 2371, 2365,    0, 2706,    0,    0, 2735,
     1503, 2513, 2548,  387, 2360,   44,  308, 2389, 2711, 2724,
     2711,    0,    0, 2714, 2697,    0, 2704, 1623, 2688, 2705,
     1472, 2683, 2661, 2672, 1479,    0, 2657, 1178, 2663, 2679,
     2121, 2421, 2425, 2431, 2441, 2661, 1498, 2665, 2660,  681,
      842, 2645, 2478, 1475, 2638,    0, 2649,    0, 2647, 2637,
        0, 1720, 2627, 1731, 2624, 1756, 2623, 2629,    0, 2601,

     2612, 2606, 4153, 4153, 2481, 2484, 2497, 2500, 2524, 2530,
     2534, 2544, 2593, 1600, 2604, 1602, 2588, 2591, 1069, 2578,
     2571, 2584, 2583, 2578, 2586, 2558, 2569, 2573, 2579, 2585,
     2595, 2559, 2589,   45,  868, 2599, 4153, 1770, 2560, 2609,
     4153, 1603, 1616, 1625, 1732, 2560, 1607, 2547, 2545, 2537,
     1717, 2543, 1725,    0, 2538, 2529, 2528, 2526, 2519, 2619,
     2623, 2629, 4153, 2633, 1769, 2639, 2500, 2507, 2504,    0,
     2509, 2495, 2490,    0, 2643, 4153, 1756, 1760, 1971, 2487,
     2489, 2480, 2481, 2476, 2469, 2464, 2467, 1972,    0, 2469,
     1982, 2649, 2653, 2659, 2663, 2456, 2466,    0, 2465,    0,

     2450, 2447, 2428, 1984,    0, 1770,    0, 2426, 2673, 2677,
     2689, 2693, 4153, 2703, 2708, 2416, 2718, 4153, 1372, 2432,
     1522, 2411, 2401, 2406, 2412, 1987, 2404, 2412, 2390, 1999,
     2394, 2383, 1988, 2391, 2389, 2017, 2396, 2390, 2721, 4153,
     2724, 2734,    0, 2740, 4153, 2005,    0, 2383,    0,    0,
     2366,    0, 2062, 2367, 2018,    0, 2347, 2120, 2337, 2121,
     2333, 2130, 2337, 2353, 4153, 2744, 2756, 2759, 2338, 2329,
     2166,    0, 2083, 2323, 2305, 2303,    0, 2772, 4153, 2775,
     2778, 2789, 4153, 2792, 2795,    0, 2285, 2291,    0,    0,
     2289, 2276,    0, 2269,    0, 2274, 2262, 2085, 2183, 2235,

     2018, 2230, 2805, 2808, 2089, 2811, 2196,    0, 2821, 2185,
        0, 2199,    0, 2190,    0, 2173, 2158, 2151, 2824, 2827,
     2123,  900, 2150, 2137, 2101, 2087,    0, 2837, 2840, 2843,
     4153, 2853, 4153, 2079, 2064, 2077, 2072,    0,    0, 2130,
     2037, 2021, 1994, 1980, 1792, 2856, 4153, 2859, 4153, 1756,
     2869, 4153, 1749, 2872, 4153,    0, 1732, 1713, 1712, 1637,
     1639, 1640, 1637, 1590,    0, 2174, 2189, 2875, 4153, 2885,
     4153,    0, 2189, 1506, 2194, 1513, 1510,    0, 1476,    0,
     1462, 1388,    0, 1382, 1379, 1378, 2239, 1351, 1213, 2221,
     1203, 1204, 1170, 1172, 1180,    0, 1169, 1090,    0,    0,

        0,    0,    0,    0, 1072,    0, 2242, 1058,    0,    0,
     1739,    0,    0, 1069,    0,    0,  905,    0,  876, 2246,
      843,  811,    0, 2253, 2252,  824, 2285,  786,    0,  785,
      784,  774, 2309, 2310,  673,  672, 2328, 2335,  656,  366,
      323,  122,    0, 4153, 4153, 2896, 2909, 2922, 2935, 2948,
     2961, 2974, 2987, 3000, 3013, 3026, 3039, 3052, 3065, 3078,
     3091, 3104, 3117, 3130, 3143, 3156, 3169, 3182, 3195, 3207,
     3220, 3233, 3245, 3248, 3258, 3262, 3268, 3278, 3285, 3296,
     3309, 3322, 3328, 3339, 3345, 3356, 3369, 3382, 3390, 3401,
     3414, 3427, 3440, 3453, 3459, 3470, 3476, 3487, 3500, 3513,

     3526, 3539, 3545, 3556, 3562, 3573, 3586, 3599, 3605, 3615,
     3622, 3632, 3639, 3650, 3662, 3675, 3688, 3697, 3704, 3707,
     3710, 3720, 3726, 3736, 3743, 3754, 3767, 3780, 3786, 3797,
     3803, 3814, 3827, 3840, 3848, 3859, 3872, 3885, 3898, 3911,
     3917, 3928, 3934, 3945, 3958, 3971, 3984, 3997, 4003, 4014,
     4020, 4031, 4044, 4057, 4063, 4073, 4080, 4090, 4097, 4104,
     4111, 4114, 4124, 4134, 4141
    } ;

static yyconst flex_int16_t yy_def[1066] =
    {   0,
      946,  946,  947,  947,  946,  946,  948,  948,  945,    9,
      949,  949,  945,   13,  945,   15,  950,  950,  945,   19,
      945,   21,   15,   15,  951,  951,  945,   27,  945,   29,
      952,  952,  946,  946,  945,   35,  953,  953,  954,  954,
      955,  955,  946,  946,  956,  956,  957,  957,  958,  958,
       15,   15,  959,  959,  945,   55,  945,   57,  960,  960,
      946,  946,  945,   63,  961,  961,  962,  962,   15,   15,
      963,  963,  945,   73,  945,   75,  964,  964,  946,  946,
      945,   81,  965,  965,  966,  966,  967,  967,  945,   89,
      946,  946,  946,  946,  968,  968,  945,   97,   97,   97,

      945,  101,  945,  103,  945,  105,  945,  945,  945,  945,
      945,  945,  945,  969,  969,  969,  945,  970,  970,  971,
      972,  971,  971,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  973,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  974,  975,  945,  945,  945,  945,  975,  149,
      149,  149,  149,  149,  149,  149,  945,  945,  945,  976,
      976,  945,  945,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  945,  977,  945,  978,  945,
      945,  945,  945,  978,  945,  945,  978,  978,  978,  978,
      978,  945,  945,  979,  945,  945,  979,  945,  979,  979,

      979,  979,  979,  979,  979,  979,  979,  979,  976,  976,
      980,  980,  981,  982,  981,  981,  983,  945,  984,  984,
      945,  985,  986,  986,  945,  986,  987,  987,  987,  945,
      945,  987,  988,  988,  945,  989,  990,  990,  945,  990,
      991,  991,  991,  945,  945,  991,  976,  976,  992,  992,
      993,  994,  993,  993,  995,  945,  996,  996,  945,  997,
      998,  998,  945,  998,  999,  999,  999,  945,  945,  999,
      976,  976, 1000, 1000, 1001, 1002, 1001, 1001, 1003,  945,
     1004, 1004,  945, 1005, 1006, 1006,  945, 1006, 1007, 1007,
     1007,  945,  945, 1007, 1008, 1008,  945,  945, 1008,  945,

     1009, 1009,  945,  945, 1009, 1009, 1009, 1009,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
     1010,  945,  945, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
      945,  945,  945,  945,  945, 1010,  945, 1010,  945, 1011,
      945, 1011, 1011, 1011, 1011, 1011, 1011, 1011, 1012,  945,
      945,  945, 1012,  945, 1012, 1012, 1012, 1012, 1012, 1012,
     1013,  945,  945,  945, 1014, 1014, 1015, 1016, 1017,  945,
      945, 1010,  945,  945, 1018, 1019,  945, 1020, 1021, 1021,
     1022, 1022,  945,  945,  945,  382,  382,  382,  382,  382,
      382,  382,  945,  976,  976,  976,  976,  976,  976,  976,

      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976, 1023,  945, 1024,  945,
      945, 1024, 1024, 1024, 1024, 1024, 1024, 1025,  945,  945,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1025, 1025, 1025,  976,  976,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1032, 1033, 1033,
     1034, 1035, 1036, 1036, 1037, 1037,  976,  976, 1038, 1039,
     1040, 1041, 1042, 1043, 1044, 1044, 1045, 1045,  976,  976,
     1046, 1047, 1048, 1049, 1050, 1051, 1052, 1052, 1053, 1053,
     1054, 1054, 1055, 1055, 1055, 1055, 1055, 1055,  945,  945,

      945, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057,  945, 1058,  945,  945,  945, 1058, 1058,
     1058, 1058, 1058, 1058, 1058, 1059,  945, 1060, 1061, 1062,
     1062, 1063, 1063,  543,  543,  543,  543,  543,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  945,
     1064, 1064, 1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065,  976,  976,  976,  976,  976,  976, 1055, 1055, 1055,

     1055,  945,  945,  945, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057,
     1057, 1057, 1057, 1057,  945, 1058, 1058, 1058, 1058, 1058,
     1058,  945,  543,  543,  543,  945,  945,  543,  543,  945,
      945,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976, 1064,
     1064,  945,  945, 1064, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065,  945,  945, 1065, 1065, 1065, 1065,
     1065,  976,  976,  976,  976,  976,  976, 1055, 1055, 1055,
      945, 1056, 1056, 1056, 1056, 1057, 1057, 1057, 1057, 1057,

     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058,
     1058,  945,  945, 1058, 1058,  945,  945,  945,  543,  543,
      543,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  945,  945,
     1064, 1064, 1065,  945,  945, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1065, 1065, 1065, 1065,  976,  976,  976,  976,
      976,  976, 1055, 1055,  945, 1056, 1056, 1056, 1057, 1057,
     1057, 1057, 1057, 1057, 1057, 1057, 1057,  945,  945, 1058,
     1058, 1058,  945,  543,  543,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  976,  976,  976,  976,  976,

      976,  976, 1064, 1064, 1065, 1065, 1065, 1065, 1065, 1065,
      976,  976,  976,  976,  976,  976, 1055, 1055, 1056, 1056,
     1057, 1057, 1057, 1057, 1057, 1057, 1057, 1058, 1058,  945,
      945,  945,  945,  976,  976,  976,  976,  976,  976,  976,
      976,  976,  976,  976,  976,  945,  945,  945,  945, 1065,
      945,  945, 1065,  945,  945, 1065,  976,  976,  976, 1055,
     1055, 1057, 1057, 1057, 1057, 1057, 1057,  945,  945,  945,
      945,  976,  976,  976,  976,  976,  976,  976,  976,  976,
      976, 1065, 1065,  976,  976,  976, 1055, 1055, 1057, 1057,
     1057, 1057, 1057,  976,  976,  976,  976,  976,  976,  976,

     1065,  976,  976,  976, 1055, 1055, 1057, 1057, 1057, 1057,
     1057,  976,  976,  976,  976, 1055, 1057, 1057,  945, 1057,
     1057,  976, 1057,  945, 1057,  976,  945, 1057,  976,  945,
     1057,  945, 1057,  945, 1057,  945, 1057,  945, 1057,  945,
     1057,  945, 1057,  945,    0,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945
    } ;

static yyconst flex_int16_t yy_nxt[4213] =
    {   0,
      945,  109,  110,  109,  945,  945,  111,  109,  110,  109,
      945,  945,  111,  115,  110,  115,  115,  110,  115,  109,
      110,  109,  945,  112,  109,  110,  109,  945,  945,  112,
      109,  110,  109,  109,  110,  109,  209,  209,  247,  247,
      271,  271,  210,  210,  248,  248,  272,  272,  363,  113,
      363,  366,  364,  366,  363,  113,  363,  376,  389,  390,
      377,  116,  391,  117,  116,  405,  117,  113,  364,  382,
      382,  390,  113,  406,  389,  391,  638,  363,  119,  363,
      719,  119,  120,  109,  110,  109,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  121,  120,  121,  121,  120,

      121,  121,  122,  120,  120,  120,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  123,  120,  120,  121,  121,  121,  121,  120,  121,
      120,  125,  126,  125,  125,  126,  125,  371,  371,  371,
      397,  371,  371,  371,  404,  412,  373,  372,  398,  400,
      373,  413,  401,  399,  944,  378,  379,  378,  412,  441,
      404,  418,  418,  418,  421,  400,  431,  413,  430,  399,
      420,  377,  441,  449,  458,  460,  458,  460,  464,  127,
      464,  406,  127,  128,  129,  130,  128,  129,  130,  108,

      109,  110,  109,  131,  132,  108,  133,  134,  135,  136,
      137,  138,  139,  140,  141,  142,  143,  144,  108,  145,
      146,  147,  148,  149,  150,  149,  151,  149,  152,  149,
      149,  153,  149,  149,  149,  149,  149,  149,  149,  149,
      149,  154,  155,  149,  156,  149,  149,  149,  113,  108,
      108,  149,  149,  149,  155,  108,  157,  108,  158,  159,
      110,  159,  158,  158,  158,  158,  158,  158,  158,  158,
      158,  160,  158,  160,  160,  158,  161,  160,  162,  158,
      163,  158,  160,  160,  164,  165,  166,  167,  168,  160,
      169,  160,  160,  160,  170,  171,  160,  172,  160,  173,

      174,  175,  160,  160,  160,  160,  160,  176,  158,  158,
      160,  171,  173,  175,  158,  160,  158,  108,  109,  110,
      109,  108,  108,  108,  108,  108,  108,  439,  466,  108,
      466,  108,  436,  382,  437,  440,  639,  178,  108,  108,
      108,  109,  110,  109,  109,  110,  109,  109,  110,  109,
      437,  440,  109,  110,  109,  224,  225,  224,  224,  225,
      224,  109,  110,  109,  467,  943,  113,  108,  108,  109,
      110,  109,  406,  108,  546,  108,  108,  109,  110,  109,
      108,  108,  108,  108,  108,  108,  414,  546,  108,  212,
      108,  221,  212,  517,  942,  220,  178,  108,  108,  108,

      220,  415,  407,  226,  408,  476,  226,  476,  478,  234,
      478,  518,  382,  415,  409,  479,  488,  113,  488,  410,
      411,  497,  490,  406,  490,  113,  108,  108,  492,  635,
      492,  410,  108,  497,  108,  108,  109,  110,  109,  108,
      108,  108,  179,  108,  108,  180,  181,  108,  108,  108,
      182,  108,  183,  184,  108,  185,  108,  186,  108,  187,
      188,  179,  189,  179,  179,  179,  179,  190,  179,  179,
      179,  179,  179,  179,  179,  179,  179,  191,  179,  179,
      179,  179,  179,  179,  113,  108,  108,  179,  179,  179,
      179,  192,  108,  193,  108,  109,  110,  109,  108,  132,

      108,  194,  108,  108,  136,  108,  108,  195,  108,  196,
      108,  108,  197,  108,  198,  108,  108,  108,  194,  199,
      194,  200,  201,  194,  194,  202,  203,  194,  194,  194,
      194,  194,  194,  204,  194,  205,  206,  194,  194,  207,
      208,  194,  194,  113,  108,  108,  194,  194,  205,  194,
      108,  108,  108,  213,  109,  110,  109,  213,  213,  213,
      213,  213,  213,  213,  213,  213,  214,  213,  214,  214,
      213,  214,  214,  215,  213,  213,  213,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  214,  214,  214,  214,

      214,  214,  216,  213,  213,  214,  214,  214,  214,  213,
      214,  213,  108,  109,  110,  109,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  217,  108,  217,  217,  108,
      217,  217,  218,  108,  108,  108,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  217,  217,  217,  217,  217,  217,  217,  217,  217,
      217,  113,  108,  108,  217,  217,  217,  217,  108,  217,
      108,  109,  110,  109,  418,  418,  418,  418,  418,  418,
      496,  500,  432,  420,  941,  443,  420,  446,  450,  421,
      447,  422,  433,  221,  501,  434,  496,  500,  515,  363,

      444,  363,  448,  415,  520,  363,  516,  363,  434,  670,
      501,  423,  444,  671,  448,  415,  938,  937,  521,  113,
      108,  109,  110,  109,  108,  108,  108,  108,  108,  108,
      108,  108,  108,  222,  108,  222,  222,  108,  222,  222,
      108,  108,  108,  108,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  113,
      108,  108,  222,  222,  222,  222,  108,  222,  108,  228,
      229,  228,  522,  228,  229,  228,  109,  110,  109,  109,
      110,  109,  109,  110,  109,  418,  418,  418,  230,  523,

      934,  231,  230,  548,  420,  231,  238,  239,  238,  545,
      933,  235,  523,  366,  235,  366,  548,  238,  239,  238,
      562,  545,  109,  110,  109,  555,  421,  232,  377,  932,
      931,  232,  424,  379,  234,  541,  562,  113,  555,  550,
      113,  108,  109,  110,  109,  108,  108,  108,  108,  108,
      108,  550,  929,  108,  240,  108,  926,  418,  418,  418,
      468,  108,  108,  108,  108,  240,  420,  242,  243,  242,
      250,  109,  110,  109,  672,  415,  242,  243,  242,  109,
      110,  109,  109,  110,  109,  920,  244,  415,  673,  245,
      113,  108,  108,  382,  425,  244,  720,  108,  245,  108,

      108,  109,  110,  109,  108,  108,  108,  108,  108,  108,
      480,  421,  108,  431,  108,  246,  557,  558,  924,  250,
      108,  108,  108,  108,  246,  415,  583,  258,  557,  558,
      258,  371,  371,  371,  371,  371,  371,  415,  583,  587,
      373,  863,  585,  373,  524,  524,  524,  923,  502,  113,
      108,  108,  587,  526,  585,  863,  108,  509,  108,  251,
      109,  110,  109,  251,  251,  251,  251,  251,  251,  251,
      251,  251,  252,  251,  252,  252,  251,  252,  252,  253,
      251,  251,  251,  252,  252,  252,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  252,  252,  252,  252,  252,

      252,  252,  252,  252,  252,  252,  252,  252,  254,  251,
      251,  252,  252,  252,  252,  251,  252,  251,  108,  109,
      110,  109,  108,  108,  108,  108,  108,  108,  108,  108,
      108,  255,  108,  255,  255,  108,  255,  255,  256,  108,
      108,  108,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  255,  255,  255,
      255,  255,  255,  255,  255,  255,  255,  113,  108,  108,
      255,  255,  255,  255,  108,  255,  108,  109,  110,  109,
      109,  110,  109,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  373,  922,  586,  373,  702,  588,  373,  259,

      918,  592,  259,  371,  371,  371,  586,  524,  524,  524,
      588,  703,  373,  592,  916,  594,  526,  503,  915,  458,
      510,  458,  528,  504,  529,  113,  505,  594,  113,  108,
      109,  110,  109,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  260,  108,  260,  260,  108,  260,  260,  108,
      108,  108,  108,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  113,  108,
      108,  260,  260,  260,  260,  108,  260,  108,  262,  263,
      262,  262,  263,  262,  266,  267,  266,  914,  266,  267,

      266,  109,  110,  109,  109,  110,  109,  460,  913,  460,
      371,  371,  371,  268,  912,  658,  269,  268,  911,  373,
      269,  524,  524,  524,  371,  371,  371,  464,  910,  464,
      526,  658,  466,  373,  466,  596,  264,  507,  476,  264,
      476,  478,  270,  478,  532,  909,  270,  596,  488,  274,
      488,  907,  274,  275,  109,  110,  109,  275,  275,  275,
      275,  275,  275,  275,  275,  275,  276,  275,  276,  276,
      275,  276,  276,  277,  275,  275,  275,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  276,  276,  276,  276,  276,  276,

      276,  276,  278,  275,  275,  276,  276,  276,  276,  275,
      276,  275,  108,  109,  110,  109,  108,  108,  108,  108,
      108,  108,  108,  108,  108,  279,  108,  279,  279,  108,
      279,  279,  280,  108,  108,  108,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  279,  279,  279,  279,  279,  279,  279,  279,  279,
      279,  113,  108,  108,  279,  279,  279,  279,  108,  279,
      108,  109,  110,  109,  109,  110,  109,  109,  110,  109,
      109,  110,  109,  371,  371,  371,  524,  524,  524,  524,
      524,  524,  373,  906,  490,  526,  490,  382,  526,  283,

      784,  615,  283,  371,  371,  371,  418,  418,  418,  418,
      418,  418,  373,  615,  492,  420,  492,  511,  420,  282,
      904,  903,  282,  530,  902,  113,  531,  901,  113,  108,
      109,  110,  109,  108,  108,  108,  108,  108,  108,  108,
      108,  108,  284,  108,  284,  284,  108,  284,  284,  108,
      108,  108,  108,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  284,  284,
      284,  284,  284,  284,  284,  284,  284,  284,  113,  108,
      108,  284,  284,  284,  284,  108,  284,  108,  286,  287,
      286,  286,  287,  286,  290,  291,  290,  620,  290,  291,

      290,  296,  297,  296,  900,  298,  296,  297,  296,  528,
      298,  527,  677,  292,  621,  652,  293,  292,  899,  379,
      293,  541,  656,  371,  371,  371,  621,  652,  677,  371,
      371,  371,  373,  666,  656,  372,  288,  898,  373,  288,
      502,  667,  294,  378,  379,  378,  294,  382,  897,  299,
      300,  895,  785,  667,  299,  300,  108,  109,  110,  109,
      108,  108,  108,  108,  108,  108,  108,  108,  108,  301,
      108,  301,  301,  108,  302,  301,  303,  108,  304,  108,
      301,  301,  301,  305,  306,  301,  301,  301,  301,  301,
      301,  301,  301,  307,  301,  301,  301,  301,  301,  308,

      301,  301,  301,  301,  301,  113,  108,  108,  301,  307,
      301,  308,  108,  301,  108,  109,  110,  109,  891,  109,
      110,  109,  109,  110,  109,  109,  110,  109,  312,  313,
      312,  312,  313,  312,  198,  418,  418,  418,  198,  309,
      722,  697,  310,  309,  420,  699,  310,  314,  727,  648,
      314,  418,  418,  418,  697,  315,  722,  699,  315,  723,
      420,  727,  724,  113,  649,  890,  421,  113,  422,  571,
      113,  723,  889,  113,  888,  887,  316,  649,  724,  316,
      108,  109,  110,  109,  108,  108,  108,  133,  108,  108,
      317,  108,  108,  108,  318,  319,  320,  108,  321,  322,

      323,  108,  108,  108,  324,  325,  133,  326,  133,  133,
      133,  133,  327,  133,  133,  133,  133,  133,  133,  133,
      133,  328,  329,  133,  133,  330,  133,  133,  133,  113,
      331,  108,  133,  133,  328,  133,  108,  108,  108,  332,
      886,  885,  919,  333,  334,  335,  648,  336,  108,  337,
      418,  418,  418,  338,  418,  418,  418,  648,  731,  420,
      884,  682,  733,  420,  371,  371,  371,  371,  371,  371,
      133,  731,  684,  373,  682,  725,  373,  883,  733,  339,
      882,  920,  648,  133,  332,  684,  426,  725,  333,  334,
      335,  921,  336,  108,  337,  382,  427,  686,  338,  752,

      506,  753,  426,  371,  371,  371,  743,  721,  427,  508,
      686,  752,  373,  776,  753,  133,  506,  524,  524,  524,
      510,  508,  743,  721,  339,  776,  526,  881,  133,  108,
      109,  110,  109,  108,  108,  108,  340,  108,  108,  108,
      108,  341,  108,  108,  108,  108,  108,  340,  108,  108,
      108,  108,  108,  342,  340,  343,  344,  340,  340,  340,
      340,  340,  340,  340,  340,  340,  340,  340,  345,  340,
      346,  347,  348,  340,  340,  340,  340,  340,  113,  108,
      108,  340,  340,  346,  348,  108,  108,  108,  108,  109,
      110,  109,  108,  132,  108,  349,  108,  350,  180,  181,

      108,  108,  351,  352,  108,  108,  353,  108,  185,  108,
      354,  108,  349,  355,  349,  356,  349,  357,  349,  349,
      358,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      359,  360,  349,  349,  349,  349,  349,  113,  108,  108,
      349,  349,  349,  360,  108,  108,  108,  108,  109,  110,
      109,  108,  108,  108,  361,  108,  108,  108,  362,  108,
      108,  108,  108,  108,  108,  361,  108,  108,  108,  108,
      108,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  361,  361,  361,  361,
      361,  361,  361,  361,  361,  361,  113,  108,  108,  361,

      361,  361,  361,  108,  108,  108,  368,  880,  754,  763,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  765,
      368,  775,  879,  368,  754,  763,  368,  368,  368,  368,
      790,  797,  524,  524,  524,  765,  794,  775,  418,  418,
      418,  526,  790,  797,  524,  524,  524,  420,  805,  524,
      524,  524,  794,  526,  800,  368,  368,  368,  526,  844,
      805,  810,  368,  878,  368,  371,  371,  371,  533,  877,
      800,  372,  844,  810,  373,  572,  524,  524,  524,  378,
      380,  378,  381,  452,  533,  526,  534,  452,  452,  452,
      452,  452,  452,  452,  452,  452,  875,  452,  534,  808,

      452,  874,  873,  452,  452,  452,  452,  872,  371,  371,
      371,  867,  418,  418,  418,  808,  535,  373,  418,  418,
      418,  420,  418,  418,  418,  866,  824,  420,  841,  535,
      850,  420,  452,  452,  452,  418,  418,  418,  824,  452,
      841,  452,  470,  850,  420,  606,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  573,  470,  812,  814,  470,
      574,  865,  470,  470,  470,  470,  862,  816,  371,  371,
      371,  876,  574,  812,  814,  575,  864,  373,  862,  861,
      371,  371,  371,  816,  876,  371,  371,  371,  575,  373,
      860,  470,  470,  470,  373,  371,  371,  371,  470,  859,

      470,  482,  605,  823,  373,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  612,  482,  858,  892,  482,  823,
      842,  482,  482,  482,  482,  857,  894,  856,  607,  892,
      893,  853,  371,  371,  371,  896,  842,  608,  371,  371,
      371,  373,  894,  893,  371,  371,  371,  373,  896,  608,
      482,  482,  482,  373,  524,  524,  524,  482,  845,  482,
      368,  843,  908,  526,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  609,  368,  908,  905,  368,  610,  917,
      368,  368,  368,  368,  611,  524,  524,  524,  628,  925,
      840,  610,  905,  928,  526,  917,  927,  611,  839,  838,

      528,  925,  529,  524,  524,  524,  928,  837,  927,  368,
      368,  368,  526,  524,  524,  524,  368,  836,  368,  371,
      371,  371,  526,  835,  834,  372,  930,  827,  373,  524,
      524,  524,  826,  378,  380,  378,  381,  452,  526,  930,
      626,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      825,  452,  935,  936,  452,  822,  627,  452,  452,  452,
      452,  636,  636,  636,  935,  936,  524,  524,  524,  939,
      637,  629,  524,  524,  524,  526,  940,  821,  818,  817,
      815,  526,  939,  629,  813,  382,  452,  452,  452,  940,
      640,  640,  640,  452,  811,  452,  470,  809,  807,  641,

      470,  470,  470,  470,  470,  470,  470,  470,  470,  631,
      470,  806,  630,  470,  382,  802,  470,  470,  470,  470,
      801,  799,  418,  418,  418,  630,  418,  418,  418,  798,
      796,  420,  662,  662,  662,  420,  795,  793,  792,  791,
      789,  663,  418,  418,  418,  470,  470,  470,  788,  787,
      661,  420,  470,  786,  470,  482,  660,  382,  783,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  777,  482,
      774,  773,  482,  664,  772,  482,  482,  482,  482,  675,
      675,  675,  371,  371,  371,  371,  371,  371,  676,  771,
      770,  373,  769,  764,  373,  762,  761,  760,  371,  371,

      371,  636,  636,  636,  482,  482,  482,  373,  759,  758,
      637,  482,  757,  482,  371,  371,  371,  756,  755,  692,
      372,  751,  693,  373,  750,  371,  371,  371,  378,  379,
      378,  371,  371,  371,  373,  640,  640,  640,  749,  748,
      373,  747,  746,  738,  641,  371,  371,  371,  633,  371,
      371,  371,  694,  737,  373,  372,  736,  735,  373,  524,
      524,  524,  695,  378,  379,  378,  734,  732,  526,  730,
      524,  524,  524,  634,  524,  524,  524,  729,  728,  526,
      712,  712,  712,  526,  726,  382,  524,  524,  524,  713,
      717,  717,  717,  709,  710,  526,  524,  524,  524,  718,

      636,  636,  636,  716,  625,  526,  708,  707,  706,  637,
      640,  640,  640,  705,  382,  711,  704,  714,  701,  641,
      739,  739,  739,  715,  418,  418,  418,  700,  698,  740,
      662,  662,  662,  420,  418,  418,  418,  696,  691,  663,
      744,  744,  744,  420,  675,  675,  675,  690,  689,  745,
      717,  717,  717,  676,  371,  371,  371,  688,  741,  718,
      371,  371,  371,  373,  371,  371,  371,  687,  685,  373,
      742,  683,  681,  373,  778,  778,  778,  680,  524,  524,
      524,  679,  678,  779,  674,  669,  742,  526,  766,  668,
      524,  524,  524,  665,  712,  712,  712,  570,  659,  526,

      768,  657,  767,  713,  524,  524,  524,  655,  654,  524,
      524,  524,  780,  526,  767,  653,  768,  781,  526,  717,
      717,  717,  739,  739,  739,  418,  418,  418,  718,  651,
      650,  740,  647,  646,  420,  418,  418,  418,  645,  644,
      782,  744,  744,  744,  420,  371,  371,  371,  643,  642,
      745,  379,  803,  632,  373,  625,  782,  371,  371,  371,
      371,  371,  371,  624,  804,  623,  373,  622,  619,  373,
      618,  617,  819,  778,  778,  778,  524,  524,  524,  524,
      524,  524,  779,  616,  614,  526,  613,  604,  526,  820,
      524,  524,  524,  830,  830,  830,  832,  832,  832,  526,

      603,  602,  831,  828,  601,  833,  846,  846,  846,  848,
      848,  848,  851,  851,  851,  847,  600,  382,  849,  829,
      382,  852,  854,  854,  854,  830,  830,  830,  832,  832,
      832,  855,  599,  598,  831,  494,  597,  833,  868,  868,
      868,  870,  870,  870,  830,  830,  830,  869,  595,  593,
      871,  591,  590,  831,  832,  832,  832,  846,  846,  846,
      848,  848,  848,  833,  589,  584,  847,  582,  581,  849,
      851,  851,  851,  854,  854,  854,  868,  868,  868,  852,
      580,  579,  855,  578,  577,  869,  870,  870,  870,  576,
      570,  569,  568,  567,  566,  871,  108,  108,  108,  108,

      108,  108,  108,  108,  108,  108,  108,  108,  108,  114,
      114,  114,  114,  114,  114,  114,  114,  114,  114,  114,
      114,  114,  118,  118,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  124,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  124,  124,  177,  177,
      177,  177,  177,  177,  177,  177,  177,  177,  177,  177,
      177,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  223,  223,  223,
      223,  223,  223,  223,  223,  223,  223,  223,  223,  223,

      227,  227,  227,  227,  227,  227,  227,  227,  227,  227,
      227,  227,  227,  233,  233,  233,  233,  233,  233,  233,
      233,  233,  233,  233,  233,  233,  236,  236,  236,  236,
      236,  236,  236,  236,  236,  236,  236,  236,  236,  237,
      237,  237,  237,  237,  237,  237,  237,  237,  237,  237,
      237,  237,  241,  241,  241,  241,  241,  241,  241,  241,
      241,  241,  241,  241,  241,  249,  249,  249,  249,  249,
      249,  249,  249,  249,  249,  249,  249,  249,  257,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  261,  261,  261,  261,  261,  261,  261,  261,  261,

      261,  261,  261,  261,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  273,  273,  273,
      273,  273,  273,  273,  273,  273,  273,  273,  273,  273,
      281,  281,  281,  281,  281,  281,  281,  281,  281,  281,
      281,  281,  281,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  289,  289,  289,  289,
      289,  289,  289,  289,  289,  289,  289,  289,  289,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  311,  311,  311,  311,  311,  311,  311,  311,
      311,  311,  311,  311,  311,  365,  365,  565,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  367,  564,  563,
      367,  367,  367,  367,  367,  367,  367,  367,  367,  367,
      368,  561,  560,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  369,  559,  556,  369,  369,  369,  369,
      369,  369,  369,  369,  369,  369,  372,  372,  554,  372,
      372,  553,  552,  551,  549,  372,  378,  378,  378,  382,
      382,  395,  382,  382,  547,  544,  382,  382,  382,  394,
      394,  543,  394,  417,  417,  417,  417,  417,  417,  419,
      419,  542,  419,  419,  379,  379,  537,  527,  419,  428,
      519,  514,  513,  499,  498,  428,  451,  495,  494,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  452,
      445,  442,  452,  452,  452,  452,  452,  452,  452,  452,
      452,  452,  453,  438,  435,  453,  453,  453,  453,  453,
      453,  453,  453,  453,  453,  454,  454,  429,  454,  455,
      377,  416,  455,  455,  455,  455,  455,  455,  455,  455,
      455,  455,  456,  456,  403,  456,  457,  457,  402,  457,
      457,  457,  457,  457,  457,  457,  457,  457,  457,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  459,  459,
      396,  459,  461,  395,  393,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  462,  462,  462,  462,  462,

      462,  463,  463,  392,  463,  463,  463,  463,  463,  463,
      463,  463,  463,  463,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  465,  465,  388,  465,  469,  387,  386,
      469,  469,  469,  469,  469,  469,  469,  469,  469,  469,
      470,  385,  384,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  471,  383,  379,  471,  471,  471,  471,
      471,  471,  471,  471,  471,  471,  472,  472,  375,  472,
      473,  374,  370,  473,  473,  473,  473,  473,  473,  473,
      473,  473,  473,  474,  474,  945,  474,  475,  475,  945,
      475,  475,  475,  475,  475,  475,  475,  475,  475,  475,

      477,  477,  477,  477,  477,  477,  477,  477,  477,  477,
      477,  945,  477,  481,  945,  945,  481,  481,  481,  481,
      481,  481,  481,  481,  481,  481,  482,  945,  945,  482,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  483,
      945,  945,  483,  483,  483,  483,  483,  483,  483,  483,
      483,  483,  484,  484,  945,  484,  485,  945,  945,  485,
      485,  485,  485,  485,  485,  485,  485,  485,  485,  486,
      486,  945,  486,  487,  487,  945,  487,  487,  487,  487,
      487,  487,  487,  487,  487,  487,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  489,  489,  945,  489,  491,

      491,  945,  945,  491,  491,  491,  491,  491,  491,  491,
      491,  491,  493,  493,  945,  493,  372,  372,  945,  372,
      372,  945,  945,  945,  945,  372,  512,  945,  945,  945,
      945,  945,  512,  525,  525,  945,  525,  525,  945,  945,
      945,  945,  525,  536,  945,  945,  945,  945,  945,  536,
      365,  365,  945,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  367,  945,  945,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  368,  945,  945,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  369,  945,
      945,  369,  369,  369,  369,  369,  369,  369,  369,  369,

      369,  538,  945,  945,  945,  945,  945,  538,  539,  945,
      945,  945,  945,  945,  539,  378,  378,  378,  540,  540,
      540,  382,  382,  945,  382,  382,  945,  945,  382,  382,
      382,  417,  417,  417,  417,  417,  417,  419,  419,  945,
      419,  419,  945,  945,  945,  945,  419,  428,  945,  945,
      945,  945,  945,  428,  451,  945,  945,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  452,  945,  945,
      452,  452,  452,  452,  452,  452,  452,  452,  452,  452,
      453,  945,  945,  453,  453,  453,  453,  453,  453,  453,
      453,  453,  453,  454,  454,  945,  454,  455,  945,  945,

      455,  455,  455,  455,  455,  455,  455,  455,  455,  455,
      456,  456,  945,  456,  457,  457,  945,  457,  457,  457,
      457,  457,  457,  457,  457,  457,  457,  459,  459,  459,
      459,  459,  459,  459,  459,  459,  459,  459,  945,  459,
      461,  945,  945,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  462,  462,  462,  462,  462,  462,  463,
      463,  945,  463,  463,  463,  463,  463,  463,  463,  463,
      463,  463,  465,  465,  465,  465,  465,  465,  465,  465,
      465,  465,  465,  945,  465,  469,  945,  945,  469,  469,
      469,  469,  469,  469,  469,  469,  469,  469,  470,  945,

      945,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  471,  945,  945,  471,  471,  471,  471,  471,  471,
      471,  471,  471,  471,  472,  472,  945,  472,  473,  945,
      945,  473,  473,  473,  473,  473,  473,  473,  473,  473,
      473,  474,  474,  945,  474,  475,  475,  945,  475,  475,
      475,  475,  475,  475,  475,  475,  475,  475,  477,  477,
      477,  477,  477,  477,  477,  477,  477,  477,  477,  945,
      477,  481,  945,  945,  481,  481,  481,  481,  481,  481,
      481,  481,  481,  481,  482,  945,  945,  482,  482,  482,
      482,  482,  482,  482,  482,  482,  482,  483,  945,  945,

      483,  483,  483,  483,  483,  483,  483,  483,  483,  483,
      484,  484,  945,  484,  485,  945,  945,  485,  485,  485,
      485,  485,  485,  485,  485,  485,  485,  486,  486,  945,
      486,  487,  487,  945,  487,  487,  487,  487,  487,  487,
      487,  487,  487,  487,  489,  489,  489,  489,  489,  489,
      489,  489,  489,  489,  489,  945,  489,  491,  491,  945,
      945,  491,  491,  491,  491,  491,  491,  491,  491,  491,
      493,  493,  945,  493,  372,  372,  945,  372,  372,  945,
      945,  945,  945,  372,  512,  945,  945,  945,  945,  945,
      512,  525,  525,  945,  525,  525,  945,  945,  945,  945,

      525,  536,  945,  945,  945,  945,  945,  536,  538,  945,
      945,  945,  945,  945,  538,  539,  945,  945,  945,  945,
      945,  539,  540,  540,  540,  382,  382,  945,  382,  382,
      945,  945,  382,  382,  382,  419,  419,  945,  419,  419,
      945,  945,  945,  945,  419,  428,  945,  945,  945,  945,
      945,  428,  107,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945
    } ;

static yyconst flex_int16_t yy_chk[4213] =
    {   0,
        0,    1,    1,    1,    0,    0,    1,    2,    2,    2,
        0,    0,    2,    3,    3,    3,    4,    4,    4,    5,
        5,    5,    0,    1,    6,    6,    6,    0,    0,    2,
        7,    7,    7,    8,    8,    8,   23,   24,   51,   52,
       69,   70,   23,   24,   51,   52,   69,   70,  109,    1,
      109,  115,  111,  115,  125,    2,  125,  141,  153,  154,
      141,    3,  155,    3,    4,  170,    4,    5,  111,  546,
      634,  154,    6,  170,  153,  155,  546,  159,    7,  159,
      634,    8,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   11,   11,   11,   12,   12,   12,  133,  133,  133,
      165,  149,  149,  149,  169,  172,  133,  149,  165,  166,
      149,  173,  166,  165,  942,  149,  149,  149,  172,  204,
      169,  179,  179,  179,  197,  166,  197,  173,  196,  165,
      179,  196,  204,  209,  224,  228,  224,  228,  238,   11,
      238,  209,   12,   11,   11,   11,   12,   12,   12,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,

       15,   15,   15,   15,   15,   15,   15,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,  203,  242,   17,
      242,   17,  201,  547,  201,  203,  547,   17,   17,   17,
       17,   25,   25,   25,   26,   26,   26,   31,   31,   31,
      201,  203,   32,   32,   32,   37,   37,   37,   38,   38,
       38,   41,   41,   41,  247,  941,   17,   17,   17,   33,
       33,   33,  247,   17,  390,   17,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,  174,  390,   18,   25,
       18,   33,   26,  345,  940,   31,   18,   18,   18,   18,

       32,  174,  171,   37,  171,  262,   38,  262,  266,   41,
      266,  345,  544,  174,  171,  271,  286,   33,  286,  171,
      171,  307,  290,  271,  290,   18,   18,   18,  296,  544,
      296,  171,   18,  307,   18,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   21,   21,   21,   21,   21,   21,

       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   21,   21,   21,   21,   21,   21,   21,
       21,   21,   21,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   34,   34,   34,  184,  184,  184,  187,  187,  187,
      306,  310,  199,  184,  939,  206,  187,  208,  210,  184,
      208,  184,  199,   34,  315,  199,  306,  310,  344,  312,

      206,  312,  208,  210,  347,  363,  344,  363,  199,  580,
      315,  187,  206,  580,  208,  210,  936,  935,  347,   34,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   39,
       39,   39,  348,   40,   40,   40,   42,   42,   42,   43,
       43,   43,   44,   44,   44,  188,  188,  188,   39,  348,

      932,   39,   40,  392,  188,   40,   47,   47,   47,  389,
      931,   43,  348,  366,   44,  366,  392,   48,   48,   48,
      409,  389,   53,   53,   53,  402,  377,   39,  377,  930,
      928,   40,  188,  380,   42,  380,  409,   43,  402,  397,
       44,   45,   45,   45,   45,   45,   45,   45,   45,   45,
       45,  397,  926,   45,   47,   45,  922,  189,  189,  189,
      248,   45,   45,   45,   45,   48,  189,   49,   49,   49,
       53,   54,   54,   54,  581,  248,   50,   50,   50,   59,
       59,   59,   60,   60,   60,  921,   49,  248,  581,   49,
       45,   45,   45,  635,  189,   50,  635,   45,   50,   45,

       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
      272,  431,   46,  431,   46,   49,  404,  405,  919,   54,
       46,   46,   46,   46,   50,  272,  440,   59,  404,  405,
       60,  321,  321,  321,  330,  330,  330,  272,  440,  444,
      321,  822,  442,  330,  349,  349,  349,  917,  321,   46,
       46,   46,  444,  349,  442,  822,   46,  330,   46,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,

       55,   55,   55,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,   55,   55,   55,   55,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   61,   61,   61,
       62,   62,   62,  324,  324,  324,  325,  325,  325,  326,
      326,  326,  324,  914,  443,  325,  619,  445,  326,   61,

      908,  449,   62,  336,  336,  336,  443,  353,  353,  353,
      445,  619,  336,  449,  905,  467,  353,  324,  898,  458,
      336,  458,  353,  325,  353,   61,  326,  467,   62,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   65,   65,
       65,   66,   66,   66,   67,   67,   67,  897,   68,   68,

       68,   71,   71,   71,   72,   72,   72,  460,  895,  460,
      328,  328,  328,   67,  894,  568,   67,   68,  893,  328,
       68,  357,  357,  357,  371,  371,  371,  464,  892,  464,
      357,  568,  466,  371,  466,  479,   65,  328,  476,   66,
      476,  478,   67,  478,  357,  891,   68,  479,  488,   71,
      488,  889,   72,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,

       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   77,   77,   77,   78,   78,   78,   79,   79,   79,
       80,   80,   80,  338,  338,  338,  355,  355,  355,  356,
      356,  356,  338,  888,  490,  355,  490,  719,  356,   79,

      719,  515,   80,  372,  372,  372,  418,  418,  418,  419,
      419,  419,  372,  515,  492,  418,  492,  338,  419,   77,
      886,  885,   78,  355,  884,   79,  356,  882,   80,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   81,   81,   81,   83,   83,
       83,   84,   84,   84,   85,   85,   85,  520,   86,   86,

       86,   87,   87,   87,  881,   87,   88,   88,   88,  527,
       88,  527,  584,   85,  520,  561,   85,   86,  879,  541,
       86,  541,  565,  502,  502,  502,  520,  561,  584,  382,
      382,  382,  502,  577,  565,  382,   83,  877,  382,   84,
      502,  577,   85,  382,  382,  382,   86,  721,  876,   87,
       87,  874,  721,  577,   88,   88,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,

       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,   89,   91,   91,   91,  864,   92,
       92,   92,   93,   93,   93,   94,   94,   94,   95,   95,
       95,   96,   96,   96,   91,  423,  423,  423,   92,   91,
      642,  614,   91,   92,  423,  616,   92,   95,  647,  558,
       96,  422,  422,  422,  614,   95,  642,  616,   96,  643,
      422,  647,  644,   91,  558,  863,  422,   92,  422,  423,
       93,  643,  862,   94,  861,  860,   95,  558,  644,   96,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,

       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   97,
       97,   97,   97,   97,   97,   97,   97,   97,   97,   99,
      859,  858,  911,   99,   99,   99,  592,   99,   99,   99,
      190,  190,  190,   99,  191,  191,  191,  594,  651,  190,
      857,  592,  653,  191,  327,  327,  327,  329,  329,  329,
       99,  651,  594,  327,  592,  645,  329,  853,  653,   99,
      850,  911,  596,   99,  100,  594,  190,  645,  100,  100,
      100,  911,  100,  100,  100,  638,  191,  596,  100,  677,

      327,  678,  190,  510,  510,  510,  665,  638,  191,  329,
      596,  677,  510,  706,  678,  100,  327,  524,  524,  524,
      510,  329,  665,  638,  100,  706,  524,  845,  100,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,

      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  103,  103,  103,
      103,  103,  103,  103,  103,  103,  103,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  105,  121,  844,  679,  688,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  691,
      121,  704,  843,  121,  679,  688,  121,  121,  121,  121,
      726,  733,  358,  358,  358,  691,  730,  704,  424,  424,
      424,  358,  726,  733,  359,  359,  359,  424,  746,  525,
      525,  525,  730,  359,  736,  121,  121,  121,  525,  801,
      746,  755,  121,  842,  121,  144,  144,  144,  358,  841,
      736,  144,  801,  755,  144,  424,  360,  360,  360,  144,
      144,  144,  144,  214,  358,  360,  359,  214,  214,  214,
      214,  214,  214,  214,  214,  214,  837,  214,  359,  753,

      214,  836,  835,  214,  214,  214,  214,  834,  504,  504,
      504,  826,  425,  425,  425,  753,  360,  504,  426,  426,
      426,  425,  571,  571,  571,  825,  773,  426,  798,  360,
      805,  571,  214,  214,  214,  427,  427,  427,  773,  214,
      798,  214,  252,  805,  427,  504,  252,  252,  252,  252,
      252,  252,  252,  252,  252,  425,  252,  758,  760,  252,
      426,  824,  252,  252,  252,  252,  821,  762,  503,  503,
      503,  840,  426,  758,  760,  427,  823,  503,  821,  818,
      511,  511,  511,  762,  840,  505,  505,  505,  427,  511,
      817,  252,  252,  252,  505,  506,  506,  506,  252,  816,

      252,  276,  503,  771,  506,  276,  276,  276,  276,  276,
      276,  276,  276,  276,  511,  276,  814,  866,  276,  771,
      799,  276,  276,  276,  276,  812,  873,  810,  505,  866,
      867,  807,  507,  507,  507,  875,  799,  506,  508,  508,
      508,  507,  873,  867,  509,  509,  509,  508,  875,  506,
      276,  276,  276,  509,  532,  532,  532,  276,  802,  276,
      369,  800,  890,  532,  369,  369,  369,  369,  369,  369,
      369,  369,  369,  507,  369,  890,  887,  369,  508,  907,
      369,  369,  369,  369,  509,  529,  529,  529,  532,  920,
      797,  508,  887,  925,  529,  907,  924,  509,  796,  794,

      529,  920,  529,  530,  530,  530,  925,  792,  924,  369,
      369,  369,  530,  531,  531,  531,  369,  791,  369,  381,
      381,  381,  531,  788,  787,  381,  927,  776,  381,  533,
      533,  533,  775,  381,  381,  381,  381,  453,  533,  927,
      530,  453,  453,  453,  453,  453,  453,  453,  453,  453,
      774,  453,  933,  934,  453,  770,  531,  453,  453,  453,
      453,  545,  545,  545,  933,  934,  535,  535,  535,  937,
      545,  533,  534,  534,  534,  535,  938,  769,  764,  763,
      761,  534,  937,  533,  759,  545,  453,  453,  453,  938,
      548,  548,  548,  453,  757,  453,  471,  754,  751,  548,

      471,  471,  471,  471,  471,  471,  471,  471,  471,  535,
      471,  748,  534,  471,  548,  738,  471,  471,  471,  471,
      737,  735,  572,  572,  572,  534,  573,  573,  573,  734,
      732,  572,  574,  574,  574,  573,  731,  729,  728,  727,
      725,  574,  575,  575,  575,  471,  471,  471,  724,  723,
      573,  575,  471,  722,  471,  483,  572,  720,  716,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  708,  483,
      703,  702,  483,  575,  701,  483,  483,  483,  483,  583,
      583,  583,  605,  605,  605,  606,  606,  606,  583,  699,
      697,  605,  696,  690,  606,  687,  686,  685,  607,  607,

      607,  608,  608,  608,  483,  483,  483,  607,  684,  683,
      608,  483,  682,  483,  542,  542,  542,  681,  680,  606,
      542,  673,  607,  542,  672,  609,  609,  609,  542,  542,
      542,  610,  610,  610,  609,  611,  611,  611,  671,  669,
      610,  668,  667,  659,  611,  612,  612,  612,  542,  543,
      543,  543,  609,  658,  612,  543,  657,  656,  543,  626,
      626,  626,  610,  543,  543,  543,  655,  652,  626,  650,
      627,  627,  627,  543,  628,  628,  628,  649,  648,  627,
      629,  629,  629,  628,  646,  639,  630,  630,  630,  629,
      633,  633,  633,  626,  627,  630,  631,  631,  631,  633,

      636,  636,  636,  632,  625,  631,  624,  623,  622,  636,
      640,  640,  640,  621,  633,  628,  620,  630,  618,  640,
      660,  660,  660,  631,  661,  661,  661,  617,  615,  660,
      662,  662,  662,  661,  664,  664,  664,  613,  602,  662,
      666,  666,  666,  664,  675,  675,  675,  601,  600,  666,
      692,  692,  692,  675,  693,  693,  693,  598,  661,  692,
      694,  694,  694,  693,  695,  695,  695,  597,  595,  694,
      664,  593,  590,  695,  709,  709,  709,  589,  710,  710,
      710,  587,  585,  709,  582,  579,  664,  710,  693,  578,
      711,  711,  711,  576,  712,  712,  712,  570,  569,  711,

      695,  567,  694,  712,  714,  714,  714,  564,  563,  715,
      715,  715,  710,  714,  694,  562,  695,  711,  715,  717,
      717,  717,  739,  739,  739,  741,  741,  741,  717,  560,
      559,  739,  557,  555,  741,  742,  742,  742,  554,  551,
      714,  744,  744,  744,  742,  766,  766,  766,  550,  549,
      744,  540,  741,  537,  766,  528,  714,  767,  767,  767,
      768,  768,  768,  523,  742,  522,  767,  521,  519,  768,
      518,  517,  766,  778,  778,  778,  780,  780,  780,  781,
      781,  781,  778,  516,  514,  780,  513,  501,  781,  768,
      782,  782,  782,  784,  784,  784,  785,  785,  785,  782,

      500,  499,  784,  780,  498,  785,  803,  803,  803,  804,
      804,  804,  806,  806,  806,  803,  497,  784,  804,  782,
      785,  806,  809,  809,  809,  819,  819,  819,  820,  820,
      820,  809,  496,  495,  819,  494,  480,  820,  828,  828,
      828,  829,  829,  829,  830,  830,  830,  828,  468,  450,
      829,  448,  447,  830,  832,  832,  832,  846,  846,  846,
      848,  848,  848,  832,  446,  441,  846,  438,  437,  848,
      851,  851,  851,  854,  854,  854,  868,  868,  868,  851,
      436,  435,  854,  434,  433,  868,  870,  870,  870,  432,
      421,  416,  415,  414,  413,  870,  946,  946,  946,  946,

      946,  946,  946,  946,  946,  946,  946,  946,  946,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  947,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  948,  948,  949,  949,  949,  949,  949,
      949,  949,  949,  949,  949,  949,  949,  949,  950,  950,
      950,  950,  950,  950,  950,  950,  950,  950,  950,  950,
      950,  951,  951,  951,  951,  951,  951,  951,  951,  951,
      951,  951,  951,  951,  952,  952,  952,  952,  952,  952,
      952,  952,  952,  952,  952,  952,  952,  953,  953,  953,
      953,  953,  953,  953,  953,  953,  953,  953,  953,  953,

      954,  954,  954,  954,  954,  954,  954,  954,  954,  954,
      954,  954,  954,  955,  955,  955,  955,  955,  955,  955,
      955,  955,  955,  955,  955,  955,  956,  956,  956,  956,
      956,  956,  956,  956,  956,  956,  956,  956,  956,  957,
      957,  957,  957,  957,  957,  957,  957,  957,  957,  957,
      957,  957,  958,  958,  958,  958,  958,  958,  958,  958,
      958,  958,  958,  958,  958,  959,  959,  959,  959,  959,
      959,  959,  959,  959,  959,  959,  959,  959,  960,  960,
      960,  960,  960,  960,  960,  960,  960,  960,  960,  960,
      960,  961,  961,  961,  961,  961,  961,  961,  961,  961,

      961,  961,  961,  961,  962,  962,  962,  962,  962,  962,
      962,  962,  962,  962,  962,  962,  962,  963,  963,  963,
      963,  963,  963,  963,  963,  963,  963,  963,  963,  963,
      964,  964,  964,  964,  964,  964,  964,  964,  964,  964,
      964,  964,  964,  965,  965,  965,  965,  965,  965,  965,
      965,  965,  965,  965,  965,  965,  966,  966,  966,  966,
      966,  966,  966,  966,  966,  966,  966,  966,  966,  967,
      967,  967,  967,  967,  967,  967,  967,  967,  967,  967,
      967,  967,  968,  968,  968,  968,  968,  968,  968,  968,
      968,  968,  968,  968,  968,  969,  969,  412,  969,  969,

      969,  969,  969,  969,  969,  969,  969,  970,  411,  410,
      970,  970,  970,  970,  970,  970,  970,  970,  970,  970,
      971,  408,  407,  971,  971,  971,  971,  971,  971,  971,
      971,  971,  971,  972,  406,  403,  972,  972,  972,  972,
      972,  972,  972,  972,  972,  972,  973,  973,  401,  973,
      973,  400,  399,  398,  396,  973,  974,  974,  974,  975,
      975,  395,  975,  975,  391,  388,  975,  975,  975,  976,
      976,  387,  976,  977,  977,  977,  977,  977,  977,  978,
      978,  386,  978,  978,  379,  378,  364,  352,  978,  979,
      346,  343,  342,  309,  308,  979,  980,  305,  302,  980,

      980,  980,  980,  980,  980,  980,  980,  980,  980,  981,
      207,  205,  981,  981,  981,  981,  981,  981,  981,  981,
      981,  981,  982,  202,  200,  982,  982,  982,  982,  982,
      982,  982,  982,  982,  982,  983,  983,  195,  983,  984,
      182,  175,  984,  984,  984,  984,  984,  984,  984,  984,
      984,  984,  985,  985,  168,  985,  986,  986,  167,  986,
      986,  986,  986,  986,  986,  986,  986,  986,  986,  987,
      987,  987,  987,  987,  987,  987,  987,  987,  987,  987,
      164,  987,  988,  161,  157,  988,  988,  988,  988,  988,
      988,  988,  988,  988,  988,  989,  989,  989,  989,  989,

      989,  990,  990,  156,  990,  990,  990,  990,  990,  990,
      990,  990,  990,  990,  991,  991,  991,  991,  991,  991,
      991,  991,  991,  991,  991,  152,  991,  992,  151,  150,
      992,  992,  992,  992,  992,  992,  992,  992,  992,  992,
      993,  148,  147,  993,  993,  993,  993,  993,  993,  993,
      993,  993,  993,  994,  146,  143,  994,  994,  994,  994,
      994,  994,  994,  994,  994,  994,  995,  995,  139,  995,
      996,  135,  131,  996,  996,  996,  996,  996,  996,  996,
      996,  996,  996,  997,  997,  107,  997,  998,  998,    0,
      998,  998,  998,  998,  998,  998,  998,  998,  998,  998,

      999,  999,  999,  999,  999,  999,  999,  999,  999,  999,
      999,    0,  999, 1000,    0,    0, 1000, 1000, 1000, 1000,
     1000, 1000, 1000, 1000, 1000, 1000, 1001,    0,    0, 1001,
     1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1001, 1002,
        0,    0, 1002, 1002, 1002, 1002, 1002, 1002, 1002, 1002,
     1002, 1002, 1003, 1003,    0, 1003, 1004,    0,    0, 1004,
     1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004, 1005,
     1005,    0, 1005, 1006, 1006,    0, 1006, 1006, 1006, 1006,
     1006, 1006, 1006, 1006, 1006, 1006, 1007, 1007, 1007, 1007,
     1007, 1007, 1007, 1007, 1007, 1007, 1007,    0, 1007, 1008,

     1008,    0,    0, 1008, 1008, 1008, 1008, 1008, 1008, 1008,
     1008, 1008, 1009, 1009,    0, 1009, 1010, 1010,    0, 1010,
     1010,    0,    0,    0,    0, 1010, 1011,    0,    0,    0,
        0,    0, 1011, 1012, 1012,    0, 1012, 1012,    0,    0,
        0,    0, 1012, 1013,    0,    0,    0,    0,    0, 1013,
     1014, 1014,    0, 1014, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1015,    0,    0, 1015, 1015, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015, 1016,    0,    0, 1016, 1016,
     1016, 1016, 1016, 1016, 1016, 1016, 1016, 1016, 1017,    0,
        0, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017, 1017,

     1017, 1018,    0,    0,    0,    0,    0, 1018, 1019,    0,
        0,    0,    0,    0, 1019, 1020, 1020, 1020, 1021, 1021,
     1021, 1022, 1022,    0, 1022, 1022,    0,    0, 1022, 1022,
     1022, 1023, 1023, 1023, 1023, 1023, 1023, 1024, 1024,    0,
     1024, 1024,    0,    0,    0,    0, 1024, 1025,    0,    0,
        0,    0,    0, 1025, 1026,    0,    0, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1026, 1026, 1026, 1027,    0,    0,
     1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027, 1027,
     1028,    0,    0, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1028, 1029, 1029,    0, 1029, 1030,    0,    0,

     1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030, 1030,
     1031, 1031,    0, 1031, 1032, 1032,    0, 1032, 1032, 1032,
     1032, 1032, 1032, 1032, 1032, 1032, 1032, 1033, 1033, 1033,
     1033, 1033, 1033, 1033, 1033, 1033, 1033, 1033,    0, 1033,
     1034,    0,    0, 1034, 1034, 1034, 1034, 1034, 1034, 1034,
     1034, 1034, 1034, 1035, 1035, 1035, 1035, 1035, 1035, 1036,
     1036,    0, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036,
     1036, 1036, 1037, 1037, 1037, 1037, 1037, 1037, 1037, 1037,
     1037, 1037, 1037,    0, 1037, 1038,    0,    0, 1038, 1038,
     1038, 1038, 1038, 1038, 1038, 1038, 1038, 1038, 1039,    0,

        0, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039, 1039,
     1039, 1040,    0,    0, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1040, 1040, 1041, 1041,    0, 1041, 1042,    0,
        0, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1042, 1043, 1043,    0, 1043, 1044, 1044,    0, 1044, 1044,
     1044, 1044, 1044, 1044, 1044, 1044, 1044, 1044, 1045, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045,    0,
     1045, 1046,    0,    0, 1046, 1046, 1046, 1046, 1046, 1046,
     1046, 1046, 1046, 1046, 1047,    0,    0, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1047, 1048,    0,    0,

     1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
     1049, 1049,    0, 1049, 1050,    0,    0, 1050, 1050, 1050,
     1050, 1050, 1050, 1050, 1050, 1050, 1050, 1051, 1051,    0,
     1051, 1052, 1052,    0, 1052, 1052, 1052, 1052, 1052, 1052,
     1052, 1052, 1052, 1052, 1053, 1053, 1053, 1053, 1053, 1053,
     1053, 1053, 1053, 1053, 1053,    0, 1053, 1054, 1054,    0,
        0, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054, 1054,
     1055, 1055,    0, 1055, 1056, 1056,    0, 1056, 1056,    0,
        0,    0,    0, 1056, 1057,    0,    0,    0,    0,    0,
     1057, 1058, 1058,    0, 1058, 1058,    0,    0,    0,    0,

     1058, 1059,    0,    0,    0,    0,    0, 1059, 1060,    0,
        0,    0,    0,    0, 1060, 1061,    0,    0,    0,    0,
        0, 1061, 1062, 1062, 1062, 1063, 1063,    0, 1063, 1063,
        0,    0, 1063, 1063, 1063, 1064, 1064,    0, 1064, 1064,
        0,    0,    0,    0, 1064, 1065,    0,    0,    0,    0,
        0, 1065,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,

      945,  945,  945,  945,  945,  945,  945,  945,  945,  945,
      945,  945
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[247] =
    {   0,
0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 
    1, 0, 0, 0, 0, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "parsers/paupParser/PaupLexicalAnalyzer.ll"
#line 2 "parsers/paupParser/PaupLexicalAnalyzer.ll"
#include "PaupParser.hpp"
#include <string>

using namespace std;

//#define QECHO ECHO
#define QECHO
#define YY_NEVER_INTERACTIVE 1
#define MATRIXFRAMESIZE 15000
#define PUSH_EXPR yy_push_state(expressions, yyscanner)
#define PUSH_NAME yy_push_state(name, yyscanner)
#define YY_DECL int paupLexlex (YYSTYPE *yylval_param, YYLTYPE* yylloc_param, void* yyscanner) 

union YYSTYPE;
struct YYLTYPE;
string currentString;
int taxanum = 0;
int reftaxanum = 0;
int sstaxanum = 0;
int refsstaxanum = 0;

#define YY_NO_UNISTD_H 1




















































#line 85 "parsers/paupParser/PaupLexicalAnalyzer.ll"
  static int colIndex = 1;
  static int charIndex = 0;
  static int last_line = 1;

  #define YY_USER_ACTION \
    yylloc_param->first_line = last_line;\
    yylloc_param->first_column = colIndex;\
    colIndex += yyleng;\
    charIndex += yyleng;\
    yylloc_param->last_line = last_line; \
    yylloc_param->last_column = colIndex - 1;

  #define NEW_LINE \
    colIndex = 1;\
    last_line = yylineno;\
    yylloc_param->last_line = last_line
#line 1816 "<stdout>"

#define INITIAL 0
#define comment 1
#define include 2
#define endsequence 3
#define endsequencematrix 4
#define escaped_char 5
#define expressions 6
#define data 7
#define matrix 8
#define name 9
#define psoda 10
#define refdata 11
#define refendsequence 12
#define refendsequencematrix 13
#define refmatrix 14
#define refsequence 15
#define refsequences 16
#define refsequences2 17
#define refsequences3 18
#define refsequences4 19
#define sequence 20
#define sequences 21
#define sequences2 22
#define sequences3 23
#define sequences4 24
#define ssdata 25
#define ssendsequence 26
#define ssendsequencematrix 27
#define ssmatrix 28
#define sssequence 29
#define sssequences 30
#define sssequences2 31
#define sssequences3 32
#define sssequences4 33
#define refssdata 34
#define refssendsequence 35
#define refssendsequencematrix 36
#define refssmatrix 37
#define refsssequence 38
#define refsssequences 39
#define refsssequences2 40
#define refsssequences3 41
#define refsssequences4 42
#define string_literal 43
#define taxa 44
#define top 45
#define translate 46
#define trees 47
#define weights 48
#define weights_list 49
#define begin_block 50
#define command_def 51
#define varcast 52

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int paupLexlex_init (yyscan_t* scanner);

int paupLexlex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int paupLexlex_destroy (yyscan_t yyscanner );

int paupLexget_debug (yyscan_t yyscanner );

void paupLexset_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE paupLexget_extra (yyscan_t yyscanner );

void paupLexset_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *paupLexget_in (yyscan_t yyscanner );

void paupLexset_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *paupLexget_out (yyscan_t yyscanner );

void paupLexset_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t paupLexget_leng (yyscan_t yyscanner );

char *paupLexget_text (yyscan_t yyscanner );

int paupLexget_lineno (yyscan_t yyscanner );

void paupLexset_lineno (int line_number ,yyscan_t yyscanner );

YYSTYPE * paupLexget_lval (yyscan_t yyscanner );

void paupLexset_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *paupLexget_lloc (yyscan_t yyscanner );
    
        void paupLexset_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int paupLexwrap (yyscan_t yyscanner );
#else
extern int paupLexwrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		yy_size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int paupLexlex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int paupLexlex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

#line 102 "parsers/paupParser/PaupLexicalAnalyzer.ll"

#line 2117 "<stdout>"

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			paupLexensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				paupLex_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		paupLex_load_buffer_state(yyscanner );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 946 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 945 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 103 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(top,yyscanner); return NEXUSSY; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 104 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sequences, yyscanner); yy_push_state(sequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 105 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 106 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext) + ";\n"; yylval_param->stringval = currentString.c_str(); yy_pop_state(yyscanner); return TREEBLOCKSTRING; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 107 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); }
	YY_BREAK
case 6:
/* rule 6 can match eol */
YY_RULE_SETUP
#line 108 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 109 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 110 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(comment,yyscanner); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 113 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 114 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEMISY; }
	YY_BREAK
case 12:
/* rule 12 can match eol */
YY_RULE_SETUP
#line 115 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; NEW_LINE; currentString += string(yytext); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 116 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(escaped_char, yyscanner); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 117 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yytext = (char*)currentString.c_str(); return STRINGSY; }
	YY_BREAK
case 15:
/* rule 15 can match eol */
YY_RULE_SETUP
#line 118 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(sequences4,yyscanner); }
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 119 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(refsequences4,yyscanner); }
	YY_BREAK
case 17:
/* rule 17 can match eol */
YY_RULE_SETUP
#line 120 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(sssequences4,yyscanner); }
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 121 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_pop_state(yyscanner); yy_push_state(refsssequences4,yyscanner); }
	YY_BREAK
case 19:
/* rule 19 can match eol */
YY_RULE_SETUP
#line 122 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; NEW_LINE; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 124 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ENDWHILESY; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 125 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ENDIFSY; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 126 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ENDSY; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 127 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(begin_block, yyscanner); return BEGINSY; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(trees,yyscanner); currentString = "begin " + string(yytext); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(taxa,yyscanner); return TAXASY; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(psoda,yyscanner); return PAUPSY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 132 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(psoda,yyscanner); return PSODASY; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 133 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(data,yyscanner); return CHARACTERSSY; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 134 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(data,yyscanner); return DATASY; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refdata,yyscanner); return REFDATASY; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(ssdata,yyscanner); return SSDATASY; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(ssdata,yyscanner); return SSDATASY; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refssdata,yyscanner); return REFSSDATASY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return ASSUMPTIONSSY; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return SETSSY; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 141 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return DISTANCESSY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 142 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return STARSY; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 143 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(command_def, yyscanner); return TOP_IDENTSY; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 147 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return EQSY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 148 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return REFERENCESY; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 149 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return COMMASY; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 150 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yylval_param->doubleval = atof(yytext); return REALNUMBERSY ; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 151 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 44:
/* rule 44 can match eol */
YY_RULE_SETUP
#line 152 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return INTCASTSY; }       
	YY_BREAK
case 45:
/* rule 45 can match eol */
YY_RULE_SETUP
#line 153 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return BOOLCASTSY; }      
	YY_BREAK
case 46:
/* rule 46 can match eol */
YY_RULE_SETUP
#line 154 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return STRINGCASTSY; }    
	YY_BREAK
case 47:
/* rule 47 can match eol */
YY_RULE_SETUP
#line 155 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return REALNUMBERCASTSY; }
	YY_BREAK
case 48:
/* rule 48 can match eol */
YY_RULE_SETUP
#line 156 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return CALLSY; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 157 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return IDENTSY; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 160 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return WHILESY; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 161 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return IFSY; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ELSIFSY; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 163 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ELSESY; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 164 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return BREAKSY; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 165 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return VARSY; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 166 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return RETURNSY; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 167 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return HELPSY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 168 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return PRINTSY; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 169 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(weights,yyscanner); return WEIGHTSSY;}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 170 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(weights,yyscanner); return WEIGHTSSY;}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 171 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yylval_param->doubleval = atof(yytext); return REALNUMBERSY; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 172 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 174 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SLASHSY; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 175 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); PUSH_EXPR; return EQSY; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 176 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return SEMISY; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 177 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LEFTPARENSY; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 178 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RIGHTPARENSY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 179 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ALLSY; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 180 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LEFTCURLYSY; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 181 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RIGHTCURLYSY; }
	YY_BREAK
case 71:
/* rule 71 can match eol */
YY_RULE_SETUP
#line 182 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return INTCASTSY; }	       
	YY_BREAK
case 72:
/* rule 72 can match eol */
YY_RULE_SETUP
#line 183 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return BOOLCASTSY; }	       
	YY_BREAK
case 73:
/* rule 73 can match eol */
YY_RULE_SETUP
#line 184 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return STRINGCASTSY; }    
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 185 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return REALNUMBERCASTSY; }
	YY_BREAK
case 75:
/* rule 75 can match eol */
YY_RULE_SETUP
#line 186 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return CALLSY; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 187 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return IDENTSY; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 189 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_NAME; return SETSY; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 190 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_NAME; return BOOTSTRAPSY; }
	YY_BREAK
/*
<psoda>[Cc][Oo][Nn][Tt][Rr][Ee][Ee]		{ QECHO; PUSH_NAME; return CONTREESY; }
<psoda>[Pp][Ss][Cc][Oo][Rr][Ee][Ss]		{ QECHO; PUSH_NAME; return PSCORESSY;}
<psoda>[Ll][Ss][Cc][Oo][Rr][Ee][Ss]		{ QECHO; PUSH_NAME; return LSCORESSY; }
    */
/*
<psoda>[Ee][Xx][Ee][Cc][Uu][Tt][Ee]   		{ QECHO; PUSH_EXPR; return EXECUTESY; }
<expressions>[Bb][Oo][Oo][Tt][Ss][Tt][Rr][Aa][Pp]	{ QECHO;            return EXPR_BOOTSTRAPSY; }
<expressions>[Cc][Oo][Nn][Tt][Rr][Ee][Ee]		{ QECHO;            return EXPR_CONTREESY; }
<expressions>[Pp][Ss][Cc][Oo][Rr][Ee][Ss]		{ QECHO;            return EXPR_PSCORESSY;}
<expressions>[Ll][Ss][Cc][Oo][Rr][Ee][Ss]		{ QECHO;            return EXPR_LSCORESSY; }
<expressions>[Ee][Xx][Ee][Cc][Uu][Tt][Ee]   		{ QECHO;            return EXPR_EXECUTESY; }
    */
case 79:
YY_RULE_SETUP
#line 207 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return PREINCRSY; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 208 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return PREDECRSY; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 209 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return UNARYINCRSY; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 210 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return UNARYDECRSY; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 211 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return TRUESY; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 212 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return FALSESY; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 213 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LOGICALANDSY; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 214 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LOGICALORSY; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 215 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NEQSY; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 216 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DBLEQSY; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 217 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LTEQSY; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 218 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return GTEQSY; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 219 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return EQSY; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 220 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LOGICALNOTSY; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 221 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return LTSY; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 222 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return GTSY; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 223 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MULSY; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 224 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DIVSY; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 225 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MODSY; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 226 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return CATSY; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 227 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ADDSY; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 228 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SUBSY; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 229 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString = ""; yy_push_state(string_literal, yyscanner); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 230 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return LEFTPARENSY; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 231 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return RIGHTPARENSY; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 232 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return COMMASY; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 233 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return SEMISY; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 235 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += "\n"; yy_pop_state(yyscanner); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 236 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += "\r"; yy_pop_state(yyscanner); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 237 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += "\t"; yy_pop_state(yyscanner); }
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 238 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; currentString += string(yytext); yy_pop_state(yyscanner); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 240 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 241 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 243 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return ENDSY; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 244 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DIMENSIONSSY; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 245 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return TAXLABELSSY; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 246 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NTAXSY; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 247 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return EQSY; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 248 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEMISY; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 249 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 250 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NAMESY; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 252 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(matrix,yyscanner); QECHO; return MATRIXSY; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 253 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sequences,yyscanner); return SEQUENCESSY; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 255 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refmatrix,yyscanner); QECHO; return MATRIXSY; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 256 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsequences,yyscanner); return SEQUENCESSY; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 258 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssmatrix,yyscanner); QECHO; return MATRIXSY; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 259 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sssequences,yyscanner); return SEQUENCESSY; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 261 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssmatrix,yyscanner); QECHO; return MATRIXSY; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 262 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsssequences,yyscanner); return SEQUENCESSY; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 264 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DIMENSIONSSY; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 265 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return TAXLABELSSY; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 266 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NEWTAXASY;  }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 267 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NTAXSY;  }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 268 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NCHARSY;  }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 269 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return FORMATSY; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 270 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return GAPSY; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 271 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return EQUATESY; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 272 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MISSINGSY; }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 273 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MATCHCHARSY; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 274 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DATATYPESY; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 275 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUCLEOTIDESY; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 276 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return STANDARDSY; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 277 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return DNASY; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 278 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RNASY; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 279 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return CODONSY; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 280 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(top,yyscanner); return ENDSY; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 281 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return PROTEINSY; } 
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 282 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return INTERLEAVESY; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 283 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NONINTERLEAVESY; }  
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 284 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return EQSY; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 285 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEMISY; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 286 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 287 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return CHAR; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 288 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NAMESY; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 290 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sequence,yyscanner); /*printf("In Matrix name with %s\n", yytext);*/ return NAMESY; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 291 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(data,yyscanner); return SEMISY; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 293 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; if ((++taxanum)%MATRIXFRAMESIZE==0) {yy_push_state(endsequencematrix,yyscanner);}else{yy_push_state(matrix,yyscanner);} return DNASEQSY; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 295 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(endsequence,yyscanner); return ENDNAMESY; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 296 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(data,yyscanner); return SEMISY; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 297 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(matrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 299 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(matrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 301 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 302 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sequences3,yyscanner); return NAMESY; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 303 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 304 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEQDATASY; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 305 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(sequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 306 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(data,yyscanner); return SEMISY; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 310 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsequence,yyscanner); return NAMESY; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 311 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refdata,yyscanner); return SEMISY; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 313 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; if ((++reftaxanum)%MATRIXFRAMESIZE==0) {yy_push_state(refendsequencematrix,yyscanner);}else{yy_push_state(refmatrix,yyscanner);} return DNASEQSY; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 315 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refendsequence,yyscanner); return ENDNAMESY; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 316 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refdata,yyscanner); return SEMISY; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 317 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 319 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 321 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 322 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsequences3,yyscanner); return NAMESY; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 323 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 324 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEQDATASY; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 325 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refsequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 326 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refdata,yyscanner); return SEMISY; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 330 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sssequence,yyscanner); return NAMESY; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 331 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 333 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; if ((++sstaxanum)%MATRIXFRAMESIZE==0) {yy_push_state(ssendsequencematrix,yyscanner);}else{yy_push_state(ssmatrix,yyscanner);} return DNASEQSY; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 335 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssendsequence,yyscanner); return ENDNAMESY; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 336 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 337 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 339 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(ssmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 341 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sssequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 342 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(sssequences3,yyscanner); return NAMESY; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 343 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 344 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEQDATASY; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 345 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(sssequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 346 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(ssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 350 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsssequence,yyscanner); return NAMESY; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 351 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 353 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; if ((++refsstaxanum)%MATRIXFRAMESIZE==0) {yy_push_state(refssendsequencematrix,yyscanner);}else{yy_push_state(refssmatrix,yyscanner);} return DNASEQSY; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 355 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssendsequence,yyscanner); return ENDNAMESY; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 356 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 357 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 359 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refssmatrix,yyscanner); return ENDDNASEQSY; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 361 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsssequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 362 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(refsssequences3,yyscanner); return NAMESY; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 363 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; }
	YY_BREAK
case 202:
/* rule 202 can match eol */
YY_RULE_SETUP
#line 364 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return SEQDATASY; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 365 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refsssequences2,yyscanner); return SEQUENCE_STARTSY; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 366 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_push_state(refssdata,yyscanner); return SEMISY; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 368 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return SEMISY; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 369 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 370 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MINUSSY;}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 371 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return COMMASY;}
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 372 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(weights_list,yyscanner); return COLONSY;}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 373 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return BSLASHSY;}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 374 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return PERIODSY;}
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 375 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ALLSY;}
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 376 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ALLSY;}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 377 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return ALLSY;}
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 378 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RESETSY;}
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 379 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RESETSY;}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 380 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RESETSY;}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 381 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RESETSY;}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 382 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return RESETSY;}
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 383 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(expressions,yyscanner); return LEFTPARENSY; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 385 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return NUMBERSY; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 386 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return MINUSSY;}
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 387 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return COMMASY;}
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 388 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); yy_pop_state(yyscanner); return SEMISY; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 389 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return BSLASHSY;}
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 390 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return PERIODSY;}
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 391 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return ALLSY;}
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 392 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return ALLSY;}
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 393 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(expressions, yyscanner); return LEFTPARENSY; }
	YY_BREAK
case 230:
/* rule 230 can match eol */
YY_RULE_SETUP
#line 395 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return INTCASTSY; }	       
	YY_BREAK
case 231:
/* rule 231 can match eol */
YY_RULE_SETUP
#line 396 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return BOOLCASTSY; }	       
	YY_BREAK
case 232:
/* rule 232 can match eol */
YY_RULE_SETUP
#line 397 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return STRINGCASTSY; }    
	YY_BREAK
case 233:
/* rule 233 can match eol */
YY_RULE_SETUP
#line 398 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return REALNUMBERCASTSY; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 399 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return TOP_IDENTSY; }
	YY_BREAK
case 235:
/* rule 235 can match eol */
YY_RULE_SETUP
#line 400 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return INTCASTSY; }	       
	YY_BREAK
case 236:
/* rule 236 can match eol */
YY_RULE_SETUP
#line 401 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return BOOLCASTSY; }	       
	YY_BREAK
case 237:
/* rule 237 can match eol */
YY_RULE_SETUP
#line 402 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return STRINGCASTSY; }    
	YY_BREAK
case 238:
/* rule 238 can match eol */
YY_RULE_SETUP
#line 403 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return REALNUMBERCASTSY; }
	YY_BREAK
case 239:
/* rule 239 can match eol */
YY_RULE_SETUP
#line 404 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_push_state(varcast,yyscanner); return VARCASTSY; }
	YY_BREAK
case 240:
/* rule 240 can match eol */
YY_RULE_SETUP
#line 405 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; PUSH_EXPR; return CALLSY; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 406 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return IDENTSY; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 407 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return TEXT; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 408 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return TEXT; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 410 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; yy_pop_state(yyscanner); return RIGHTPARENSY; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 411 "parsers/paupParser/PaupLexicalAnalyzer.ll"
{ QECHO; return IDENTSY; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 412 "parsers/paupParser/PaupLexicalAnalyzer.ll"
ECHO;
	YY_BREAK
#line 3487 "<stdout>"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(comment):
case YY_STATE_EOF(include):
case YY_STATE_EOF(endsequence):
case YY_STATE_EOF(endsequencematrix):
case YY_STATE_EOF(escaped_char):
case YY_STATE_EOF(expressions):
case YY_STATE_EOF(data):
case YY_STATE_EOF(matrix):
case YY_STATE_EOF(name):
case YY_STATE_EOF(psoda):
case YY_STATE_EOF(refdata):
case YY_STATE_EOF(refendsequence):
case YY_STATE_EOF(refendsequencematrix):
case YY_STATE_EOF(refmatrix):
case YY_STATE_EOF(refsequence):
case YY_STATE_EOF(refsequences):
case YY_STATE_EOF(refsequences2):
case YY_STATE_EOF(refsequences3):
case YY_STATE_EOF(refsequences4):
case YY_STATE_EOF(sequence):
case YY_STATE_EOF(sequences):
case YY_STATE_EOF(sequences2):
case YY_STATE_EOF(sequences3):
case YY_STATE_EOF(sequences4):
case YY_STATE_EOF(ssdata):
case YY_STATE_EOF(ssendsequence):
case YY_STATE_EOF(ssendsequencematrix):
case YY_STATE_EOF(ssmatrix):
case YY_STATE_EOF(sssequence):
case YY_STATE_EOF(sssequences):
case YY_STATE_EOF(sssequences2):
case YY_STATE_EOF(sssequences3):
case YY_STATE_EOF(sssequences4):
case YY_STATE_EOF(refssdata):
case YY_STATE_EOF(refssendsequence):
case YY_STATE_EOF(refssendsequencematrix):
case YY_STATE_EOF(refssmatrix):
case YY_STATE_EOF(refsssequence):
case YY_STATE_EOF(refsssequences):
case YY_STATE_EOF(refsssequences2):
case YY_STATE_EOF(refsssequences3):
case YY_STATE_EOF(refsssequences4):
case YY_STATE_EOF(string_literal):
case YY_STATE_EOF(taxa):
case YY_STATE_EOF(top):
case YY_STATE_EOF(translate):
case YY_STATE_EOF(trees):
case YY_STATE_EOF(weights):
case YY_STATE_EOF(weights_list):
case YY_STATE_EOF(begin_block):
case YY_STATE_EOF(command_def):
case YY_STATE_EOF(varcast):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * paupLexlex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( paupLexwrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of paupLexlex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					paupLexrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			paupLexrestart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) paupLexrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 946 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 946 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 945);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					paupLexrestart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( paupLexwrap(yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void paupLexrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        paupLexensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            paupLex_create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	paupLex_init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	paupLex_load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void paupLex_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		paupLexpop_buffer_state();
	 *		paupLexpush_buffer_state(new_buffer);
     */
	paupLexensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	paupLex_load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (paupLexwrap()) processing, but the only time this flag
	 * is looked at is after paupLexwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void paupLex_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE paupLex_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) paupLexalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in paupLex_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) paupLexalloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in paupLex_create_buffer()" );

	b->yy_is_our_buffer = 1;

	paupLex_init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with paupLex_create_buffer()
 * @param yyscanner The scanner object.
 */
    void paupLex_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		paupLexfree((void *) b->yy_ch_buf ,yyscanner );

	paupLexfree((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a paupLexrestart() or at EOF.
 */
    static void paupLex_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	paupLex_flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then paupLex_init_buffer was _probably_
     * called from paupLexrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void paupLex_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		paupLex_load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void paupLexpush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	paupLexensure_buffer_stack(yyscanner);

	/* This block is copied from paupLex_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from paupLex_switch_to_buffer. */
	paupLex_load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void paupLexpop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	paupLex_delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		paupLex_load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void paupLexensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)paupLexalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in paupLexensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)paupLexrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in paupLexensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE paupLex_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) paupLexalloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in paupLex_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	paupLex_switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to paupLexlex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       paupLex_scan_bytes() instead.
 */
YY_BUFFER_STATE paupLex_scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return paupLex_scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to paupLexlex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE paupLex_scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n, i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) paupLexalloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in paupLex_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = paupLex_scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in paupLex_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) paupLexalloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) paupLexrealloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE paupLexget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int paupLexget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int paupLexget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *paupLexget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *paupLexget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t paupLexget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *paupLexget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void paupLexset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void paupLexset_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "paupLexset_lineno called with no buffer" , yyscanner); 
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void paupLexset_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           yy_fatal_error( "paupLexset_column called with no buffer" , yyscanner); 
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see paupLex_switch_to_buffer
 */
void paupLexset_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void paupLexset_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int paupLexget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void paupLexset_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * paupLexget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void paupLexset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *paupLexget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void paupLexset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* paupLexlex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int paupLexlex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) paupLexalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* paupLexlex_init_extra has the same functionality as paupLexlex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to paupLexalloc in
 * the yyextra field.
 */

int paupLexlex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    paupLexset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) paupLexalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    paupLexset_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from paupLexlex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * paupLexlex_init()
     */
    return 0;
}

/* paupLexlex_destroy is for both reentrant and non-reentrant scanners. */
int paupLexlex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		paupLex_delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		paupLexpop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	paupLexfree(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        paupLexfree(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * paupLexlex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    paupLexfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *paupLexalloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *paupLexrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void paupLexfree (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see paupLexrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 412 "parsers/paupParser/PaupLexicalAnalyzer.ll"



